openapi: 3.0.0
info:
  title: Vaccines Reminder APIs
  description: APIs for managing products in the Vaccines Reminder application
  version: 1.0.0
servers:
  - url: http://localhost:8000
    description: Development server

paths:
  /api/products/admin/add:
    post:
      tags:
        - Products
      summary: Create new product
      description: Add a new product to the system (Admin only)
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - name
                - price
                - description
                - quantity
                - image
                - features
                - requiredAge
              properties:
                name:
                  type: string
                  description: Product name (2-100 characters)
                  example: "Vitamin D Supplement"
                price:
                  type: number
                  format: float
                  description: Product price (positive number)
                  example: 29.99
                description:
                  type: string
                  description: Product description (20-1000 characters)
                  example: "High-quality vitamin D supplement for infants"
                quantity:
                  type: integer
                  description: Product quantity (positive integer)
                  example: 100
                image:
                  type: string
                  format: binary
                  description: Product image (JPG, PNG, GIF)
                features:
                  type: array
                  description: List of product features (1-10 features, each 3-250 characters)
                  items:
                    type: string
                  example:
                    [
                      "Sugar-free formula",
                      "Easy to administer",
                      "Pediatrician recommended",
                    ]
                requiredAge:
                  type: string
                  description: Required age information (5-30 characters)
                  example: "0-12 months"
      responses:
        "201":
          description: Product created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product is successfully created"
                  data:
                    $ref: "#/components/schemas/Product"
                  error:
                    type: object
                    nullable: true
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product name is not a valid string"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 429
                  message:
                    type: string
                    example: "Too many product creation attempts. Please try again in 1 minute."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error inserting product"
                  error:
                    type: object

  /api/products:
    get:
      tags:
        - Products
      summary: Get all products with reviews
      description: Retrieve a paginated list of available products with their reviews and user details
      parameters:
        - in: query
          name: cursor
          schema:
            type: string
          description: MongoDB ObjectId of the last product from previous page
          example: "60d21b4667d0d8992e610c85"
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Number of products per page
          example: 10
      responses:
        "200":
          description: Products with reviews retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Products are successfully retrieved"
                  data:
                    type: array
                    items:
                      allOf:
                        - $ref: "#/components/schemas/Product"
                        - type: object
                          properties:
                            totalReviews:
                              type: integer
                              description: Total number of reviews for this product
                              example: 15
                            reviews:
                              type: array
                              description: Array of product reviews with user details
                              items:
                                type: object
                                properties:
                                  _id:
                                    type: string
                                    format: uuid
                                    example: "6839a9f7c7522462a378f7db"
                                  message:
                                    type: string
                                    example: "Great product! My child loves it."
                                  rating:
                                    type: integer
                                    minimum: 1
                                    maximum: 5
                                    example: 5
                                  createdAt:
                                    type: string
                                    format: date-time
                                    example: "2025-05-30T12:52:07.842Z"
                                  user:
                                    type: object
                                    nullable: true
                                    properties:
                                      _id:
                                        type: string
                                        format: uuid
                                        example: "68055a4228a57b56dc11b7df"
                                      name:
                                        type: string
                                        example: "Ahmed Mohamed"
                  error:
                    type: object
                    nullable: true
              examples:
                productsWithReviews:
                  summary: "Products with reviews and user details"
                  value:
                    message: "Products are successfully retrieved"
                    data:
                      - _id: "6803e59f5cfbd3f8d54aaec9"
                        name: "Vitamin D Supplement"
                        price: 29.99
                        description: "High-quality vitamin D supplement for infants"
                        image: "https://res.cloudinary.com/example/vitamin-d.jpg"
                        quantity: 50
                        rating: 4.2
                        features: ["Sugar-free formula", "Easy to swallow", "Doctor recommended"]
                        requiredAge: "6 months and above"
                        totalReviews: 15
                        reviews:
                          - _id: "6839a9f7c7522462a378f7db"
                            message: "Great product! My child loves it."
                            rating: 5
                            createdAt: "2025-05-30T12:52:07.842Z"
                            user:
                              _id: "68055a4228a57b56dc11b7df"
                              name: "Ahmed Mohamed"
                          - _id: "6839b1a2c7522462a378f7dc"
                            message: "Good quality supplement, will buy again."
                            rating: 4
                            createdAt: "2025-05-30T13:15:22.156Z"
                            user:
                              _id: "68055b3328a57b56dc11b7e0"
                              name: "Sara Ali"
                    error: null
        "400":
          description: Invalid query parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation failed. Please check your input."
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        msg:
                          type: string
                          example: "Cursor must be a valid MongoDB ObjectId"
                        param:
                          type: string
                          example: "cursor"
                        location:
                          type: string
                          example: "query"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 429
                  message:
                    type: string
                    example: "Too many products fetch attempts. Please try again in 1 minute."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error getting all products"
                  error:
                    type: string
                    example: "Database connection error"


  /api/products/admin/update-quantity/{id}:
    patch:
      tags:
        - Products
      summary: Update product quantity
      description: Update the quantity of a product (Admin only)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the product to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - quantity
              properties:
                quantity:
                  type: integer
                  description: The new quantity (non-negative integer)
                  example: 50
      responses:
        "200":
          description: Product quantity updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product with ID X updated successfully"
                  data:
                    $ref: "#/components/schemas/Product"
                  error:
                    type: object
                    nullable: true
        "400":
          description: Invalid input or product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Could not find the product of ID: X"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 429
                  message:
                    type: string
                    example: "Too many product quantity update attempts. Please try again in 1 minute."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error updating product quantity of ID X"
                  error:
                    type: string
                    example: "Database connection error"

  /api/products/admin/delete/{id}:
    delete:
      tags:
        - Products
      summary: Delete a product
      description: Delete a product by ID (Admin only)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the product to delete
      responses:
        "200":
          description: Product deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product with ID X is deleted successfully"
                  data:
                    $ref: "#/components/schemas/Product"
                  error:
                    type: object
                    nullable: true
        "400":
          description: Product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Could not find the product of ID: X"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 429
                  message:
                    type: string
                    example: "Too many product deletion attempts. Please try again in 1 minute."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error deleting product of ID X"
                  error:
                    type: string
                    example: "Database connection error"

  /api/carts:
    post:
      tags:
        - Carts
      summary: Create new cart
      description: >
        Create a new cart for the authenticated user. Address fields (governorate, city, street, buildingNumber, apartmentNumber) 
        are required only for Cash payments. For Online payments, the user's registered address is automatically used.
        Users can only have one pending cart at a time.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - cart
              properties:
                cart:
                  type: object
                  properties:
                    governorate:
                      type: string
                      description: "Delivery address governorate (4-30 characters, required only for Cash payments)"
                      example: "Cairo"
                    city:
                      type: string
                      description: "Delivery address city (4-50 characters, required only for Cash payments)"
                      example: "1st Settlement"
                    street:
                      type: string
                      description: "Delivery address street (4-100 characters, required only for Cash payments)"
                      example: "Main Street"
                    buildingNumber:
                      type: integer
                      description: "Building number (positive integer, required only for Cash payments)"
                      example: 123
                    apartmentNumber:
                      type: integer
                      description: "Apartment number (positive integer, required only for Cash payments)"
                      example: 45
                    paymentType:
                      type: string
                      enum: ["Cash", "Online"]
                      default: "Online"
                      description: "Payment method (Online payments use user's registered address automatically)"
                      example: "Cash"
      responses:
        "201":
          description: Cart created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cart is successfully created"
                  data:
                    $ref: "#/components/schemas/Cart"
                  error:
                    type: object
                    nullable: true
        "400":
          description: Invalid input or user already has a pending cart
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation failed"
                  errors:
                    type: object
                    properties:
                      cart:
                        type: object
                        properties:
                          msg:
                            type: string
                            example: "You already have a pending cart. Please complete or delete it first."
                          location:
                            type: string
                            example: "body"
        "401":
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Unauthorized"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many cart creation attempts. Please try again after an hour."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error inserting cart"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

  /api/carts/pending:
    get:
      tags:
        - Carts
      summary: Get user's pending cart with products
      description: >
        Retrieve the current user's pending cart if one exists, including all products in the cart.
        Returns cart details and product information in a single response.
      responses:
        "200":
          description: Pending cart retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cart retrieved successfully"
                  data:
                    type: object
                    properties:
                      cart:
                        $ref: "#/components/schemas/Cart"
                      products:
                        type: array
                        items:
                          type: object
                          properties:
                            productId:
                              type: string
                              format: uuid
                              example: "60d21b4667d0d8992e610c85"
                            name:
                              type: string
                              example: "Vitamin D Supplement"
                            image:
                              type: string
                              example: "https://res.cloudinary.com/example/image/upload/vitamin-d.jpg"
                            requiredAge:
                              type: string
                              example: "6 months"
                            quantity:
                              type: integer
                              example: 2
                            price:
                              type: number
                              format: float
                              example: 59.98
                  error:
                    type: object
                    nullable: true
              examples:
                pendingCartWithProducts:
                  summary: "User's pending cart with products"
                  value:
                    message: "Cart retrieved successfully"
                    data:
                      cart:
                        _id: "60d21b4667d0d8992e610c87"
                        userId: "60d21b4667d0d8992e610c85"
                        productsCount: 2
                        totalPrice: 79.98
                        status: "Pending"
                        governorate: "Cairo"
                        city: "Nasr City"
                        street: "Abbas El-Akkad Street"
                        buildingNumber: 123
                        apartmentNumber: 45
                        paymentType: "Cash"
                      products:
                        - productId: "60d21b4667d0d8992e610c85"
                          name: "Vitamin D Supplement"
                          image: "https://res.cloudinary.com/example/image/upload/vitamin-d.jpg"
                          requiredAge: "6 months"
                          quantity: 2
                          price: 59.98
                        - productId: "60d21b4667d0d8992e610c86"
                          name: "Iron Supplement"
                          image: "https://res.cloudinary.com/example/image/upload/iron.jpg"
                          requiredAge: "1 year"
                          quantity: 1
                          price: 20.00
                    error: null
        "401":
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Unauthorized"
        "404":
          description: No pending cart found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Could not find pending cart for user: 60d21b4667d0d8992e610c85"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many cart retrieval attempts. Please try again after a minute."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error finding cart"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

  /api/carts/my-orders:
    get:
      tags:
        - Carts
      summary: Get user's confirmed and waiting carts
      description: Retrieve the current user's carts with status "Confirmed" or "Waiting for cash payment" (order history)
      responses:
        "200":
          description: User's confirmed and waiting carts retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User's confirmed and waiting carts retrieved successfully"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Cart"
                  error:
                    type: object
                    nullable: true
              examples:
                userOrders:
                  summary: "User's order history"
                  value:
                    message: "User's confirmed and waiting carts retrieved successfully"
                    data:
                      - _id: "60d21b4667d0d8992e610c89"
                        userId: "60d21b4667d0d8992e610c85"
                        productsCount: 2
                        totalPrice: 89.98
                        status: "Confirmed"
                        governorate: "Cairo"
                        city: "Nasr City"
                        street: "Abbas El-Akkad Street"
                        buildingNumber: 123
                        apartmentNumber: 45
                        paymentType: "Online"
                      - _id: "60d21b4667d0d8992e610c88"
                        userId: "60d21b4667d0d8992e610c85"
                        productsCount: 1
                        totalPrice: 29.99
                        status: "Waiting for cash payment"
                        governorate: "Alexandria"
                        city: "Sidi Gaber"
                        street: "Corniche Street"
                        buildingNumber: 456
                        apartmentNumber: 12
                        paymentType: "Cash"
                    error: null
        "401":
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Unauthorized"
        "404":
          description: No confirmed or waiting carts found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No confirmed or waiting carts found for this user"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many cart status retrieval attempts. Please try again after a minute."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error retrieving user's confirmed and waiting carts"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

  /api/carts/{cartId}/products:
    post:
      tags:
        - Carts
      summary: Add product to cart
      description: >
        Add a product to an existing pending cart. Automatically updates cart totals and product inventory.
        Products cannot be added to the same cart twice - use quantity update instead.
      parameters:
        - in: path
          name: cartId
          required: true
          schema:
            type: string
            format: uuid
          description: MongoDB ObjectId of the cart
          example: "680cde050f7a995dadea207a"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - productId
                - quantity
              properties:
                productId:
                  type: string
                  format: uuid
                  description: MongoDB ObjectId of the product to add
                  example: "6803e59f5cfbd3f8d54aaec9"
                quantity:
                  type: integer
                  minimum: 1
                  description: Quantity of the product
                  example: 2
      responses:
        "201":
          description: Product successfully added to cart
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product is successfully added to cart"
                  data:
                    $ref: "#/components/schemas/CartProduct"
                  error:
                    type: object
                    nullable: true
        "400":
          description: Invalid input or validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation failed"
                  errors:
                    type: object
                    properties:
                      cartId:
                        type: object
                        properties:
                          msg:
                            type: string
                            example: "Cart not found, does not belong to you, or is not in 'Pending' status"
                      productId:
                        type: object
                        properties:
                          msg:
                            type: string
                            example: "This product is already in your cart. Use the update quantity endpoint instead."
                      quantity:
                        type: object
                        properties:
                          msg:
                            type: string
                            example: "Insufficient inventory. Only 5 units available."
        "401":
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Unauthorized"
        "404":
          description: Cart or product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product with ID 6803e59f5cfbd3f8d54aaec9 not found"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many product addition attempts. Please try again after a minute."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error adding product to cart"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

  /api/carts/{cartId}/products/{productId}:
    delete:
      tags:
        - Carts
      summary: Remove product from cart
      description: >
        Remove a specific product from a cart and automatically update cart totals and return product quantity to inventory.
      parameters:
        - in: path
          name: cartId
          required: true
          schema:
            type: string
            format: uuid
          description: MongoDB ObjectId of the cart
          example: "680cde050f7a995dadea207a"
        - in: path
          name: productId
          required: true
          schema:
            type: string
            format: uuid
          description: MongoDB ObjectId of the product to remove
          example: "6803e59f5cfbd3f8d54aaec9"
      responses:
        "200":
          description: Product successfully removed from cart
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product removed from cart successfully"
                  data:
                    $ref: "#/components/schemas/CartProduct"
                  error:
                    type: object
                    nullable: true
        "400":
          description: Invalid input or validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation failed"
                  errors:
                    type: object
                    properties:
                      cartId:
                        type: object
                        properties:
                          msg:
                            type: string
                            example: "Cart not found, does not belong to you, or is not in 'Pending' status"
                      productId:
                        type: object
                        properties:
                          msg:
                            type: string
                            example: "Product not found in this cart"
        "401":
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Unauthorized"
        "404":
          description: Cart, product, or cart product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product not found in this cart"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many product removal attempts. Please try again after a minute."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error removing product from cart"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

    patch:
      tags:
        - Carts
      summary: Update product quantity in cart
      description: >
        Update the quantity of a product in a cart. Automatically adjusts cart totals and product inventory.
        Validates that sufficient inventory is available for quantity increases.
      parameters:
        - in: path
          name: cartId
          required: true
          schema:
            type: string
            format: uuid
          description: MongoDB ObjectId of the cart
          example: "680cde050f7a995dadea207a"
        - in: path
          name: productId
          required: true
          schema:
            type: string
            format: uuid
          description: MongoDB ObjectId of the product
          example: "6803e59f5cfbd3f8d54aaec9"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - quantity
              properties:
                quantity:
                  type: integer
                  minimum: 1
                  description: New quantity for the product
                  example: 3
      responses:
        "200":
          description: Product quantity updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cart product quantity updated successfully"
                  data:
                    $ref: "#/components/schemas/CartProduct"
                  error:
                    type: object
                    nullable: true
        "400":
          description: Invalid quantity or insufficient inventory
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation failed"
                  errors:
                    type: object
                    properties:
                      quantity:
                        type: object
                        properties:
                          msg:
                            type: string
                            example: "Insufficient inventory. Only 5 additional units available."
        "401":
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Unauthorized"
        "404":
          description: Cart, product, or cart product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product not found in this cart"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many quantity update attempts. Please try again after a minute."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error updating product quantity"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

  /api/carts/{cartId}:
    delete:
      tags:
        - Carts
      summary: Delete cart
      description: >
        Delete an entire cart and return all products to inventory. Only pending carts can be deleted.
        This operation is irreversible and will permanently remove the cart and all its products.
      parameters:
        - in: path
          name: cartId
          required: true
          schema:
            type: string
            format: uuid
          description: MongoDB ObjectId of the cart
          example: "680cde050f7a995dadea207a"
      responses:
        "200":
          description: Cart deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cart deleted successfully"
                  data:
                    type: object
                    properties:
                      deletedCart:
                        $ref: "#/components/schemas/Cart"
                  error:
                    type: object
                    nullable: true
        "400":
          description: Cart not found or invalid status
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation failed"
                  errors:
                    type: object
                    properties:
                      cartId:
                        type: object
                        properties:
                          msg:
                            type: string
                            example: "Cannot delete cart with status: Confirmed"
        "401":
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Unauthorized"
        "404":
          description: Cart not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cart not found or does not belong to you"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many cart deletion attempts. Please try again after an hour."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error deleting cart"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

  /api/carts/status/{cartId}:
    patch:
      tags:
        - Carts
      summary: Update cart status for cash payment
      description: >
        Update the status of a cash payment cart from "Pending" to "Waiting for cash payment".
        This endpoint is used when a user confirms their cash payment cart.
        Only works for pending carts with cash payment type that contain at least one product.
      parameters:
        - in: path
          name: cartId
          required: true
          schema:
            type: string
            format: uuid
          description: MongoDB ObjectId of the cart to update
          example: "680cde050f7a995dadea207a"
      responses:
        "200":
          description: Cart status updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cart status is updated successfully"
                  data:
                    type: object
                    properties:
                      confirmedCart:
                        $ref: "#/components/schemas/Cart"
                  error:
                    type: object
                    nullable: true
              examples:
                successfulUpdate:
                  summary: "Successful status update"
                  value:
                    message: "Cart status is updated successfully"
                    data:
                      confirmedCart:
                        _id: "60d21b4667d0d8992e610c88"
                        userId: "60d21b4667d0d8992e610c85"
                        productsCount: 2
                        totalPrice: 89.98
                        status: "Waiting for cash payment"
                        governorate: "Alexandria"
                        city: "Sidi Gaber"
                        street: "Corniche Street"
                        buildingNumber: 456
                        apartmentNumber: 12
                        paymentType: "Cash"
                    error: null
        "400":
          description: Invalid input or cart validation failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation Failed!"
                  errors:
                    type: object
                    properties:
                      cartId:
                        type: object
                        properties:
                          msg:
                            type: string
                            example: "Cart not found, does not belong to you, is not in 'Pending' status, or is not a cash payment cart"
                      cart:
                        type: object
                        properties:
                          msg:
                            type: string
                            example: "Cannot update status of an empty cart. Please add products first."
        "401":
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Unauthorized"
        "404":
          description: Cart not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cart with id: 680cde050f7a995dadea207a not found for user with id: 60d21b4667d0d8992e610c84"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many cart status update attempts. Please try again after 15 mins."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error updating cart status"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []
  /api/carts/pending:
    get:
      tags:
        - Carts
      summary: Get user's pending cart
      description: Retrieve the current user's pending cart if one exists
      responses:
        "200":
          description: Pending cart retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Pending cart retrieved successfully"
                  data:
                    $ref: "#/components/schemas/Cart"
                  error:
                    type: object
                    nullable: true
              examples:
                pendingCart:
                  summary: "User's pending cart"
                  value:
                    message: "Pending cart retrieved successfully"
                    data:
                      _id: "60d21b4667d0d8992e610c87"
                      userId: "60d21b4667d0d8992e610c85"
                      productsCount: 2
                      totalPrice: 79.98
                      status: "Pending"
                      governorate: "Cairo"
                      city: "Nasr City"
                      street: "Abbas El-Akkad Street"
                      buildingNumber: 123
                      apartmentNumber: 45
                      paymentType: "Cash"
                    error: null
        "401":
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Unauthorized"
        "404":
          description: No pending cart found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No pending cart found for this user"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many pending cart retrieval attempts. Please try again after a minute."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error retrieving pending cart"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

  /api/carts/my-orders:
    get:
      tags:
        - Carts
      summary: Get user's confirmed and waiting carts
      description: Retrieve the current user's carts with status "Confirmed" or "Waiting for cash payment"
      responses:
        "200":
          description: User's confirmed and waiting carts retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User's confirmed and waiting carts retrieved successfully"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Cart"
                  error:
                    type: object
                    nullable: true
              examples:
                userOrders:
                  summary: "User's order history"
                  value:
                    message: "User's confirmed and waiting carts retrieved successfully"
                    data:
                      - _id: "60d21b4667d0d8992e610c89"
                        userId: "60d21b4667d0d8992e610c85"
                        productsCount: 2
                        totalPrice: 89.98
                        status: "Confirmed"
                        governorate: "Cairo"
                        city: "Nasr City"
                        street: "Abbas El-Akkad Street"
                        buildingNumber: 123
                        apartmentNumber: 45
                        paymentType: "Online"
                      - _id: "60d21b4667d0d8992e610c88"
                        userId: "60d21b4667d0d8992e610c85"
                        productsCount: 1
                        totalPrice: 29.99
                        status: "Waiting for cash payment"
                        governorate: "Alexandria"
                        city: "Sidi Gaber"
                        street: "Corniche Street"
                        buildingNumber: 456
                        apartmentNumber: 12
                        paymentType: "Cash"
                    error: null
        "401":
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Unauthorized"
        "404":
          description: No confirmed or waiting carts found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No confirmed or waiting carts found for this user"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many cart status retrieval attempts. Please try again after a minute."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error retrieving user's confirmed and waiting carts"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

  /api/carts/{cartId}/products:
    post:
      tags:
        - Carts
      summary: Add product to cart
      description: >
        Add a product to an existing pending cart. Automatically updates cart totals and product inventory.
        Products cannot be added to the same cart twice - use quantity update instead.
      parameters:
        - in: path
          name: cartId
          required: true
          schema:
            type: string
            format: uuid
          description: MongoDB ObjectId of the cart
          example: "680cde050f7a995dadea207a"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - productId
                - quantity
              properties:
                productId:
                  type: string
                  format: uuid
                  description: MongoDB ObjectId of the product to add
                  example: "6803e59f5cfbd3f8d54aaec9"
                quantity:
                  type: integer
                  minimum: 1
                  description: Quantity of the product
                  example: 2
      responses:
        "201":
          description: Product successfully added to cart
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product is successfully added to cart"
                  data:
                    $ref: "#/components/schemas/CartProduct"
                  error:
                    type: object
                    nullable: true
        "400":
          description: Invalid input or validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation failed"
                  errors:
                    type: object
                    properties:
                      cartId:
                        type: object
                        properties:
                          msg:
                            type: string
                            example: "Cart not found, does not belong to you, or is not in 'Pending' status"
                      productId:
                        type: object
                        properties:
                          msg:
                            type: string
                            example: "This product is already in your cart. Use the update quantity endpoint instead."
                      quantity:
                        type: object
                        properties:
                          msg:
                            type: string
                            example: "Insufficient inventory. Only 5 units available."
        "401":
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Unauthorized"
        "404":
          description: Cart or product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product with ID 6803e59f5cfbd3f8d54aaec9 not found"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many product addition attempts. Please try again after a minute."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error adding product to cart"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

  /api/carts/{cartId}/products/{productId}:
    delete:
      tags:
        - Carts
      summary: Remove product from cart
      description: >
        Remove a specific product from a cart and automatically update cart totals and return product quantity to inventory.
      parameters:
        - in: path
          name: cartId
          required: true
          schema:
            type: string
            format: uuid
          description: MongoDB ObjectId of the cart
          example: "680cde050f7a995dadea207a"
        - in: path
          name: productId
          required: true
          schema:
            type: string
            format: uuid
          description: MongoDB ObjectId of the product to remove
          example: "6803e59f5cfbd3f8d54aaec9"
      responses:
        "200":
          description: Product successfully removed from cart
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product removed from cart successfully"
                  data:
                    $ref: "#/components/schemas/CartProduct"
                  error:
                    type: object
                    nullable: true
        "400":
          description: Invalid input or validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation failed"
                  errors:
                    type: object
                    properties:
                      cartId:
                        type: object
                        properties:
                          msg:
                            type: string
                            example: "Cart not found, does not belong to you, or is not in 'Pending' status"
                      productId:
                        type: object
                        properties:
                          msg:
                            type: string
                            example: "Product not found in this cart"
        "401":
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Unauthorized"
        "404":
          description: Cart, product, or cart product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product not found in this cart"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many product removal attempts. Please try again after a minute."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error removing product from cart"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

    patch:
      tags:
        - Carts
      summary: Update product quantity in cart
      description: >
        Update the quantity of a product in a cart. Automatically adjusts cart totals and product inventory.
        Validates that sufficient inventory is available for quantity increases.
      parameters:
        - in: path
          name: cartId
          required: true
          schema:
            type: string
            format: uuid
          description: MongoDB ObjectId of the cart
          example: "680cde050f7a995dadea207a"
        - in: path
          name: productId
          required: true
          schema:
            type: string
            format: uuid
          description: MongoDB ObjectId of the product
          example: "6803e59f5cfbd3f8d54aaec9"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - quantity
              properties:
                quantity:
                  type: integer
                  minimum: 1
                  description: New quantity for the product
                  example: 3
      responses:
        "200":
          description: Product quantity updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cart product quantity updated successfully"
                  data:
                    $ref: "#/components/schemas/CartProduct"
                  error:
                    type: object
                    nullable: true
        "400":
          description: Invalid quantity or insufficient inventory
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation failed"
                  errors:
                    type: object
                    properties:
                      quantity:
                        type: object
                        properties:
                          msg:
                            type: string
                            example: "Insufficient inventory. Only 5 additional units available."
        "401":
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Unauthorized"
        "404":
          description: Cart, product, or cart product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product not found in this cart"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many quantity update attempts. Please try again after a minute."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error updating product quantity"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

  /api/carts/{cartId}:
    delete:
      tags:
        - Carts
      summary: Delete cart
      description: >
        Delete an entire cart and return all products to inventory. Only pending carts can be deleted.
        This operation is irreversible and will permanently remove the cart and all its products.
      parameters:
        - in: path
          name: cartId
          required: true
          schema:
            type: string
            format: uuid
          description: MongoDB ObjectId of the cart
          example: "680cde050f7a995dadea207a"
      responses:
        "200":
          description: Cart deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cart deleted successfully"
                  data:
                    type: object
                    properties:
                      deletedCart:
                        $ref: "#/components/schemas/Cart"
                  error:
                    type: object
                    nullable: true
        "400":
          description: Cart not found or invalid status
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation failed"
                  errors:
                    type: object
                    properties:
                      cartId:
                        type: object
                        properties:
                          msg:
                            type: string
                            example: "Cannot delete cart with status: Confirmed"
        "401":
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Unauthorized"
        "404":
          description: Cart not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cart not found or does not belong to you"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many cart deletion attempts. Please try again after an hour."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error deleting cart"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

  /api/carts/status/{cartId}:
    patch:
      tags:
        - Carts
      summary: Update cart status for cash payment
      description: >
        Update the status of a cash payment cart from "Pending" to "Waiting for cash payment".
        This endpoint is used when a user confirms their cash payment cart.
        Only works for pending carts with cash payment type that contain at least one product.
      parameters:
        - in: path
          name: cartId
          required: true
          schema:
            type: string
            format: uuid
          description: MongoDB ObjectId of the cart to update
          example: "680cde050f7a995dadea207a"
      responses:
        "200":
          description: Cart status updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cart status is updated successfully"
                  data:
                    type: object
                    properties:
                      confirmedCart:
                        $ref: "#/components/schemas/Cart"
                  error:
                    type: object
                    nullable: true
              examples:
                successfulUpdate:
                  summary: "Successful status update"
                  value:
                    message: "Cart status is updated successfully"
                    data:
                      confirmedCart:
                        _id: "60d21b4667d0d8992e610c88"
                        userId: "60d21b4667d0d8992e610c85"
                        productsCount: 2
                        totalPrice: 89.98
                        status: "Waiting for cash payment"
                        governorate: "Alexandria"
                        city: "Sidi Gaber"
                        street: "Corniche Street"
                        buildingNumber: 456
                        apartmentNumber: 12
                        paymentType: "Cash"
                    error: null
        "400":
          description: Invalid input or cart validation failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation Failed!"
                  errors:
                    type: object
                    properties:
                      cartId:
                        type: object
                        properties:
                          msg:
                            type: string
                            example: "Cart not found, does not belong to you, is not in 'Pending' status, or is not a cash payment cart"
                      cart:
                        type: object
                        properties:
                          msg:
                            type: string
                            example: "Cannot update status of an empty cart. Please add products first."
        "401":
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Unauthorized"
        "404":
          description: Cart not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cart with id: 680cde050f7a995dadea207a not found for user with id: 60d21b4667d0d8992e610c84"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many cart status update attempts. Please try again after 15 mins."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error updating cart status"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

  /api/carts/admin:
    get:
      tags:
        - Carts
      summary: Get all users' carts with products (Admin only)
      description: >
        Admin can retrieve all users' carts with their associated products. 
        This endpoint provides a comprehensive view of all cart data across the system.
        Carts are sorted by creation date (newest first) and include full user and product details.
      responses:
        "200":
  description: All users' carts retrieved successfully
  content:
    application/json:
      schema:
        type: object
        properties:
          message:
            type: string
            example: "All users' carts retrieved successfully"
          data:
            type: array
            items:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    _id:
                      type: string
                      format: uuid
                      description: MongoDB ObjectId of the user
                      example: "68055a4228a57b56dc11b7df"
                    fName:
                      type: string
                      description: User's first name
                      example: "Youssef"
                    lName:
                      type: string
                      description: User's last name
                      example: "Hassanien"
                    email:
                      type: string
                      format: email
                      description: User's email address
                      example: "user1@example.com"
                    phoneNumber:
                      type: string
                      description: User's phone number
                      example: "+201015411320"
                    carts:
                      type: array
                      description: Array of all carts belonging to this user
                      items:
                        type: object
                        properties:
                          _id:
                            type: string
                            format: uuid
                            description: MongoDB ObjectId of the cart
                            example: "683d5d2efda5e8f94840f9b5"
                          productsCount:
                            type: integer
                            description: Total number of product units in the cart
                            example: 1
                          totalPrice:
                            type: number
                            format: float
                            description: Total price of all products in the cart
                            example: 80
                          status:
                            type: string
                            enum: ["Pending", "Online paid", "Waiting for cash payment", "Delivered", "Cancelled"]
                            description: Current status of the cart
                            example: "Pending"
                          governorate:
                            type: string
                            description: Delivery address governorate
                            example: "Cairo"
                          city:
                            type: string
                            description: Delivery address city
                            example: "First Settlement"
                          street:
                            type: string
                            description: Delivery address street
                            example: "North 90"
                          buildingNumber:
                            type: integer
                            description: Building number for delivery
                            example: 250
                          apartmentNumber:
                            type: integer
                            description: Apartment number for delivery
                            example: 64
                          paymentType:
                            type: string
                            enum: ["Cash", "Online"]
                            description: Payment method for the cart
                            example: "Online"
                          createdAt:
                            type: string
                            format: date-time
                            description: When the cart was created
                            example: "2025-06-02T08:13:34.492Z"
                          updatedAt:
                            type: string
                            format: date-time
                            description: When the cart was last updated
                            example: "2025-06-02T10:35:45.890Z"
                          products:
                            type: array
                            description: Products in this cart
                            items:
                              type: object
                              properties:
                                _id:
                                  type: string
                                  format: uuid
                                  description: MongoDB ObjectId of the product
                                  example: "6803e59f5cfbd3f8d54aaec9"
                                name:
                                  type: string
                                  description: Product name
                                  example: "Product Test Name"
                                image:
                                  type: string
                                  format: uri
                                  description: Product image URL
                                  example: "https://res.cloudinary.com/ddktkfkyy/image/upload/f_auto,q_auto/v1/Vaccines-Reminder/Products/1745085851442-1745009899611-industry-warehouse-with-cardboard-containers-pallets-equipment-generative-ai?_a=BAMAJaWO0"
                                requiredAge:
                                  type: string
                                  description: Age requirement for the product
                                  example: "6 months"
                                quantity:
                                  type: integer
                                  minimum: 1
                                  description: Quantity of this product in the cart
                                  example: 1
                                price:
                                  type: number
                                  format: float
                                  description: Price of this product
                                  example: 80
          error:
            type: object
            nullable: true
            description: Error object, null on success
      examples:
        adminAllCartsSuccess:
          summary: "All users' carts grouped by user"
          value:
            message: "All users' carts retrieved successfully"
            data: [
              {
                user: {
                  _id: "68055a4228a57b56dc11b7df",
                  fName: "Youssef",
                  lName: "Hassanien",
                  email: "user1@example.com",
                  phoneNumber: "+201015411320",
                  carts: [
                    {
                      _id: "683d5d2efda5e8f94840f9b5",
                      productsCount: 1,
                      totalPrice: 80,
                      status: "Pending",
                      governorate: "Cairo",
                      city: "First Settlement",
                      street: "North 90",
                      buildingNumber: 250,
                      apartmentNumber: 64,
                      paymentType: "Online",
                      createdAt: "2025-06-02T08:13:34.492Z",
                      updatedAt: "2025-06-02T10:35:45.890Z",
                      products: [
                        {
                          _id: "6803e59f5cfbd3f8d54aaec9",
                          name: "Product Test Name",
                          image: "https://res.cloudinary.com/ddktkfkyy/image/upload/f_auto,q_auto/v1/Vaccines-Reminder/Products/1745085851442-1745009899611-industry-warehouse-with-cardboard-containers-pallets-equipment-generative-ai?_a=BAMAJaWO0",
                          requiredAge: "6 months",
                          quantity: 1,
                          price: 80,
                        }
                      ]
                    },
                    {
                      _id: "6835a4957db7abdc9142ecc3",
                      productsCount: 1,
                      totalPrice: 80,
                      status: "Delivered",
                      governorate: "Cairo",
                      city: "First Settlement",
                      street: "North 90",
                      buildingNumber: 250,
                      apartmentNumber: 64,
                      paymentType: "Cash",
                      createdAt: "2025-05-27T11:40:05.320Z",
                      updatedAt: "2025-05-31T18:41:00.426Z",
                      products: [
                        {
                          _id: "6803e59f5cfbd3f8d54aaec9",
                          name: "Product Test Name",
                          image: "https://res.cloudinary.com/ddktkfkyy/image/upload/f_auto,q_auto/v1/Vaccines-Reminder/Products/1745085851442-1745009899611-industry-warehouse-with-cardboard-containers-pallets-equipment-generative-ai?_a=BAMAJaWO0",
                          requiredAge: "6 months",
                          quantity: 1,
                          price: 80,
                        }
                      ]
                    }
                  ]
                }
              }
            ]
            error: null

        "401":
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Unauthorized"
        "403":
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "You are not allowed to access this route"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many requests, please try again later"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error retrieving all users' carts"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

  /api/carts/status/admin/{cartId}:
    patch:
      tags:
        - Carts
      summary: Update cart status (Admin only)
      description: >
        Admin can update cart status to any valid status (Pending, Online paid, Waiting for cash payment, Delivered, Cancelled).
        This is different from the user endpoint which only allows Pending → Waiting for cash payment.
      parameters:
        - in: path
          name: cartId
          required: true
          schema:
            type: string
            format: uuid
          description: MongoDB ObjectId of the cart to update
          example: "680cde050f7a995dadea207a"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum: ["Pending", "Online paid", "Waiting for cash payment", "Delivered", "Cancelled"]
                  description: New status for the cart
                  example: "Delivered"
      responses:
        "200":
          description: Cart status updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cart status updated successfully"
                  data:
                    type: object
                    properties:
                      cart:
                        $ref: "#/components/schemas/Cart"
                  error:
                    type: object
                    nullable: true
        "400":
          description: Invalid input or validation failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid cart status value"
        "401":
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Unauthorized"
        "403":
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "You are not allowed to access this route"
        "404":
          description: Cart not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cart with ID 680cde050f7a995dadea207a not found"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error updating cart status"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

  /api/carts/pending:
    get:
      tags:
        - Carts
      summary: Get user's pending cart
      description: Retrieve the current user's pending cart if one exists
      responses:
        "200":
          description: Pending cart retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Pending cart retrieved successfully"
                  data:
                    $ref: "#/components/schemas/Cart"
                  error:
                    type: object
                    nullable: true
              examples:
                pendingCart:
                  summary: "User's pending cart"
                  value:
                    message: "Pending cart retrieved successfully"
                    data:
                      _id: "60d21b4667d0d8992e610c87"
                      userId: "60d21b4667d0d8992e610c85"
                      productsCount: 2
                      totalPrice: 79.98
                      status: "Pending"
                      governorate: "Cairo"
                      city: "Nasr City"
                      street: "Abbas El-Akkad Street"
                      buildingNumber: 123
                      apartmentNumber: 45
                      paymentType: "Cash"
                    error: null
        "401":
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Unauthorized"
        "404":
          description: No pending cart found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No pending cart found for this user"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many pending cart retrieval attempts. Please try again after a minute."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error retrieving pending cart"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

  /api/carts/my-orders:
    get:
      tags:
        - Carts
      summary: Get user's confirmed and waiting carts
      description: Retrieve the current user's carts with status "Confirmed" or "Waiting for cash payment"
      responses:
        "200":
          description: User's confirmed and waiting carts retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User's confirmed and waiting carts retrieved successfully"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Cart"
                  error:
                    type: object
                    nullable: true
              examples:
                userOrders:
                  summary: "User's order history"
                  value:
                    message: "User's confirmed and waiting carts retrieved successfully"
                    data:
                      - _id: "60d21b4667d0d8992e610c89"
                        userId: "60d21b4667d0d8992e610c85"
                        productsCount: 2
                        totalPrice: 89.98
                        status: "Confirmed"
                        governorate: "Cairo"
                        city: "Nasr City"
                        street: "Abbas El-Akkad Street"
                        buildingNumber: 123
                        apartmentNumber: 45
                        paymentType: "Online"
                      - _id: "60d21b4667d0d8992e610c88"
                        userId: "60d21b4667d0d8992e610c85"
                        productsCount: 1
                        totalPrice: 29.99
                        status: "Waiting for cash payment"
                        governorate: "Alexandria"
                        city: "Sidi Gaber"
                        street: "Corniche Street"
                        buildingNumber: 456
                        apartmentNumber: 12
                        paymentType: "Cash"
                    error: null
        "401":
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Unauthorized"
        "404":
          description: No confirmed or waiting carts found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No confirmed or waiting carts found for this user"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many cart status retrieval attempts. Please try again after a minute."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error retrieving user's confirmed and waiting carts"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

  /api/carts/{cartId}/products:
    post:
      tags:
        - Carts
      summary: Add product to cart
      description: >
        Add a product to an existing pending cart. Automatically updates cart totals and product inventory.
        Products cannot be added to the same cart twice - use quantity update instead.
      parameters:
        - in: path
          name: cartId
          required: true
          schema:
            type: string
            format: uuid
          description: MongoDB ObjectId of the cart
          example: "680cde050f7a995dadea207a"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - productId
                - quantity
              properties:
                productId:
                  type: string
                  format: uuid
                  description: MongoDB ObjectId of the product to add
                  example: "6803e59f5cfbd3f8d54aaec9"
                quantity:
                  type: integer
                  minimum: 1
                  description: Quantity of the product
                  example: 2
      responses:
        "201":
          description: Product successfully added to cart
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product is successfully added to cart"
                  data:
                    $ref: "#/components/schemas/CartProduct"
                  error:
                    type: object
                    nullable: true
        "400":
          description: Invalid input or validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation failed"
                  errors:
                    type: object
                    properties:
                      cartId:
                        type: object
                        properties:
                          msg:
                            type: string
                            example: "Cart not found, does not belong to you, or is not in 'Pending' status"
                      productId:
                        type: object
                        properties:
                          msg:
                            type: string
                            example: "This product is already in your cart. Use the update quantity endpoint instead."
                      quantity:
                        type: object
                        properties:
                          msg:
                            type: string
                            example: "Insufficient inventory. Only 5 units available."
        "401":
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Unauthorized"
        "404":
          description: Cart or product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product with ID 6803e59f5cfbd3f8d54aaec9 not found"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many product addition attempts. Please try again after a minute."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error adding product to cart"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

  /api/carts/{cartId}/products/{productId}:
    delete:
      tags:
        - Carts
      summary: Remove product from cart
      description: >
        Remove a specific product from a cart and automatically update cart totals and return product quantity to inventory.
      parameters:
        - in: path
          name: cartId
          required: true
          schema:
            type: string
            format: uuid
          description: MongoDB ObjectId of the cart
          example: "680cde050f7a995dadea207a"
        - in: path
          name: productId
          required: true
          schema:
            type: string
            format: uuid
          description: MongoDB ObjectId of the product to remove
          example: "6803e59f5cfbd3f8d54aaec9"
      responses:
        "200":
          description: Product successfully removed from cart
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product removed from cart successfully"
                  data:
                    $ref: "#/components/schemas/CartProduct"
                  error:
                    type: object
                    nullable: true
        "400":
          description: Invalid input or validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation failed"
                  errors:
                    type: object
                    properties:
                      cartId:
                        type: object
                        properties:
                          msg:
                            type: string
                            example: "Cart not found, does not belong to you, or is not in 'Pending' status"
                      productId:
                        type: object
                        properties:
                          msg:
                            type: string
                            example: "Product not found in this cart"
        "401":
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Unauthorized"
        "404":
          description: Cart, product, or cart product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product not found in this cart"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many product removal attempts. Please try again after a minute."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error removing product from cart"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

    patch:
      tags:
        - Carts
      summary: Update product quantity in cart
      description: >
        Update the quantity of a product in a cart. Automatically adjusts cart totals and product inventory.
        Validates that sufficient inventory is available for quantity increases.
      parameters:
        - in: path
          name: cartId
          required: true
          schema:
            type: string
            format: uuid
          description: MongoDB ObjectId of the cart
          example: "680cde050f7a995dadea207a"
        - in: path
          name: productId
          required: true
          schema:
            type: string
            format: uuid
          description: MongoDB ObjectId of the product
          example: "6803e59f5cfbd3f8d54aaec9"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - quantity
              properties:
                quantity:
                  type: integer
                  minimum: 1
                  description: New quantity for the product
                  example: 3
      responses:
        "200":
          description: Product quantity updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cart product quantity updated successfully"
                  data:
                    $ref: "#/components/schemas/CartProduct"
                  error:
                    type: object
                    nullable: true
        "400":
          description: Invalid quantity or insufficient inventory
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation failed"
                  errors:
                    type: object
                    properties:
                      quantity:
                        type: object
                        properties:
                          msg:
                            type: string
                            example: "Insufficient inventory. Only 5 additional units available."
        "401":
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Unauthorized"
        "404":
          description: Cart, product, or cart product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product not found in this cart"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many quantity update attempts. Please try again after a minute."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error updating product quantity"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

  /api/carts/{cartId}:
    delete:
      tags:
        - Carts
      summary: Delete cart
      description: >
        Delete an entire cart and return all products to inventory. Only pending carts can be deleted.
        This operation is irreversible and will permanently remove the cart and all its products.
      parameters:
        - in: path
          name: cartId
          required: true
          schema:
            type: string
            format: uuid
          description: MongoDB ObjectId of the cart
          example: "680cde050f7a995dadea207a"
      responses:
        "200":
          description: Cart deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cart deleted successfully"
                  data:
                    type: object
                    properties:
                      deletedCart:
                        $ref: "#/components/schemas/Cart"
                  error:
                    type: object
                    nullable: true
        "400":
          description: Cart not found or invalid status
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cannot delete cart with status: Confirmed"
        "401":
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Unauthorized"
        "404":
          description: Cart not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cart not found or does not belong to you"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many cart deletion attempts. Please try again after an hour."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error deleting cart"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

  /api/carts/status/{cartId}:
    patch:
      tags:
        - Carts
      summary: Update cart status for cash payment
      description: >
        Update the status of a cash payment cart from "Pending" to "Waiting for cash payment".
        This endpoint is used when a user confirms their cash payment cart.
        Only works for pending carts with cash payment type that contain at least one product.
      parameters:
        - in: path
          name: cartId
          required: true
          schema:
            type: string
            format: uuid
          description: MongoDB ObjectId of the cart to update
          example: "680cde050f7a995dadea207a"
      responses:
        "200":
          description: Cart status updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cart status is updated successfully"
                  data:
                    type: object
                    properties:
                      confirmedCart:
                        $ref: "#/components/schemas/Cart"
                  error:
                    type: object
                    nullable: true
              examples:
                successfulUpdate:
                  summary: "Successful status update"
                  value:
                    message: "Cart status is updated successfully"
                    data:
                      confirmedCart:
                        _id: "60d21b4667d0d8992e610c88"
                        userId: "60d21b4667d0d8992e610c85"
                        productsCount: 2
                        totalPrice: 89.98
                        status: "Waiting for cash payment"
                        governorate: "Alexandria"
                        city: "Sidi Gaber"
                        street: "Corniche Street"
                        buildingNumber: 456
                        apartmentNumber: 12
                        paymentType: "Cash"
                    error: null
        "400":
          description: Invalid input or cart validation failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation Failed!"
                  errors:
                    type: object
                    properties:
                      cartId:
                        type: object
                        properties:
                          msg:
                            type: string
                            example: "Cart not found, does not belong to you, is not in 'Pending' status, or is not a cash payment cart"
                      cart:
                        type: object
                        properties:
                          msg:
                            type: string
                            example: "Cannot update status of an empty cart. Please add products first."
        "401":
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Unauthorized"
        "404":
          description: Cart not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cart with id: 680cde050f7a995dadea207a not found for user with id: 60d21b4667d0d8992e610c84"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many cart status update attempts. Please try again after 15 mins."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error updating cart status"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

  /api/carts/status/admin/{cartId}:
    patch:
      tags:
        - Carts
      summary: Update cart status (Admin only)
      description: >
        Admin can update cart status to any valid status (Pending, Online paid, Waiting for cash payment, Delivered, Cancelled).
        This is different from the user endpoint which only allows Pending → Waiting for cash payment.
      parameters:
        - in: path
          name: cartId
          required: true
          schema:
            type: string
            format: uuid
          description: MongoDB ObjectId of the cart to update
          example: "680cde050f7a995dadea207a"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum: ["Pending", "Online paid", "Waiting for cash payment", "Delivered", "Cancelled"]
                  description: New status for the cart
                  example: "Delivered"
      responses:
        "200":
          description: Cart status updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cart status updated successfully"
                  data:
                    type: object
                    properties:
                      cart:
                        $ref: "#/components/schemas/Cart"
                  error:
                    type: object
                    nullable: true
        "400":
          description: Invalid input or validation failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid cart status value"
        "401":
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Unauthorized"
        "403":
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "You are not allowed to access this route"
        "404":
          description: Cart not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cart with ID 680cde050f7a995dadea207a not found"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error updating cart status"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

  /api/carts/pending:
    get:
      tags:
        - Carts
      summary: Get user's pending cart
      description: Retrieve the current user's pending cart if one exists
      responses:
        "200":
          description: Pending cart retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Pending cart retrieved successfully"
                  data:
                    $ref: "#/components/schemas/Cart"
                  error:
                    type: object
                    nullable: true
              examples:
                pendingCart:
                  summary: "User's pending cart"
                  value:
                    message: "Pending cart retrieved successfully"
                    data:
                      _id: "60d21b4667d0d8992e610c87"
                      userId: "60d21b4667d0d8992e610c85"
                      productsCount: 2
                      totalPrice: 79.98
                      status: "Pending"
                      governorate: "Cairo"
                      city: "Nasr City"
                      street: "Abbas El-Akkad Street"
                      buildingNumber: 123
                      apartmentNumber: 45
                      paymentType: "Cash"
                    error: null
        "401":
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Unauthorized"
        "404":
          description: No pending cart found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No pending cart found for this user"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many pending cart retrieval attempts. Please try again after a minute."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error retrieving pending cart"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

  /api/carts/my-orders:
    get:
      tags:
        - Carts
      summary: Get user's confirmed and waiting carts
      description: Retrieve the current user's carts with status "Confirmed" or "Waiting for cash payment"
      responses:
        "200":
          description: User's confirmed and waiting carts retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User's confirmed and waiting carts retrieved successfully"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Cart"
                  error:
                    type: object
                    nullable: true
              examples:
                userOrders:
                  summary: "User's order history"
                  value:
                    message: "User's confirmed and waiting carts retrieved successfully"
                    data:
                      - _id: "60d21b4667d0d8992e610c89"
                        userId: "60d21b4667d0d8992e610c85"
                        productsCount: 2
                        totalPrice: 89.98
                        status: "Confirmed"
                        governorate: "Cairo"
                        city: "Nasr City"
                        street: "Abbas El-Akkad Street"
                        buildingNumber: 123
                        apartmentNumber: 45
                        paymentType: "Online"
                      - _id: "60d21b4667d0d8992e610c88"
                        userId: "60d21b4667d0d8992e610c85"
                        productsCount: 1
                        totalPrice: 29.99
                        status: "Waiting for cash payment"
                        governorate: "Alexandria"
                        city: "Sidi Gaber"
                        street: "Corniche Street"
                        buildingNumber: 456
                        apartmentNumber: 12
                        paymentType: "Cash"
                    error: null
        "401":
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Unauthorized"
        "404":
          description: No confirmed or waiting carts found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No confirmed or waiting carts found for this user"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many cart status retrieval attempts. Please try again after a minute."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error retrieving user's confirmed and waiting carts"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

  /api/carts/{cartId}/products:
    post:
      tags:
        - Carts
      summary: Add product to cart
      description: >
        Add a product to an existing pending cart. Automatically updates cart totals and product inventory.
        Products cannot be added to the same cart twice - use quantity update instead.
      parameters:
        - in: path
          name: cartId
          required: true
          schema:
            type: string
            format: uuid
          description: MongoDB ObjectId of the cart
          example: "680cde050f7a995dadea207a"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - productId
                - quantity
              properties:
                productId:
                  type: string
                  format: uuid
                  description: MongoDB ObjectId of the product to add
                  example: "6803e59f5cfbd3f8d54aaec9"
                quantity:
                  type: integer
                  minimum: 1
                  description: Quantity of the product
                  example: 2
      responses:
        "201":
          description: Product successfully added to cart
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product is successfully added to cart"
                  data:
                    $ref: "#/components/schemas/CartProduct"
                  error:
                    type: object
                    nullable: true
        "400":
          description: Invalid input or validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation failed"
                  errors:
                    type: object
                    properties:
                      cartId:
                        type: object
                        properties:
                          msg:
                            type: string
                            example: "Cart not found, does not belong to you, or is not in 'Pending' status"
                      productId:
                        type: object
                        properties:
                          msg:
                            type: string
                            example: "This product is already in your cart. Use the update quantity endpoint instead."
                      quantity:
                        type: object
                        properties:
                          msg:
                            type: string
                            example: "Insufficient inventory. Only 5 units available."
        "401":
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Unauthorized"
        "404":
          description: Cart or product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product with ID 6803e59f5cfbd3f8d54aaec9 not found"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many product addition attempts. Please try again after a minute."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error adding product to cart"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

  /api/carts/{cartId}/products/{productId}:
    delete:
      tags:
        - Carts
      summary: Remove product from cart
      description: >
        Remove a specific product from a cart and automatically update cart totals and return product quantity to inventory.
      parameters:
        - in: path
          name: cartId
          required: true
          schema:
            type: string
            format: uuid
          description: MongoDB ObjectId of the cart
          example: "680cde050f7a995dadea207a"
        - in: path
          name: productId
          required: true
          schema:
            type: string
            format: uuid
          description: MongoDB ObjectId of the product to remove
          example: "6803e59f5cfbd3f8d54aaec9"
      responses:
        "200":
          description: Product successfully removed from cart
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product removed from cart successfully"
                  data:
                    $ref: "#/components/schemas/CartProduct"
                  error:
                    type: object
                    nullable: true
        "400":
          description: Invalid input or validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation failed"
                  errors:
                    type: object
                    properties:
                      cartId:
                        type: object
                        properties:
                          msg:
                            type: string
                            example: "Cart not found, does not belong to you, or is not in 'Pending' status"
                      productId:
                        type: object
                        properties:
                          msg:
                            type: string
                            example: "Product not found in this cart"
        "401":
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Unauthorized"
        "404":
          description: Cart, product, or cart product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product not found in this cart"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many product removal attempts. Please try again after a minute."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error removing product from cart"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

    patch:
      tags:
        - Carts
      summary: Update product quantity in cart
      description: >
        Update the quantity of a product in a cart. Automatically adjusts cart totals and product inventory.
        Validates that sufficient inventory is available for quantity increases.
      parameters:
        - in: path
          name: cartId
          required: true
          schema:
            type: string
            format: uuid
          description: MongoDB ObjectId of the cart
          example: "680cde050f7a995dadea207a"
        - in: path
          name: productId
          required: true
          schema:
            type: string
            format: uuid
          description: MongoDB ObjectId of the product
          example: "6803e59f5cfbd3f8d54aaec9"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - quantity
              properties:
                quantity:
                  type: integer
                  minimum: 1
                  description: New quantity for the product
                  example: 3
      responses:
        "200":
          description: Product quantity updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cart product quantity updated successfully"
                  data:
                    $ref: "#/components/schemas/CartProduct"
                  error:
                    type: object
                    nullable: true
        "400":
          description: Invalid quantity or insufficient inventory
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation failed"
                  errors:
                    type: object
                    properties:
                      quantity:
                        type: object
                        properties:
                          msg:
                            type: string
                            example: "Insufficient inventory. Only 5 additional units available."
        "401":
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Unauthorized"
        "404":
          description: Cart, product, or cart product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product not found in this cart"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many quantity update attempts. Please try again after a minute."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error updating product quantity"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

  /api/carts/{cartId}:
    delete:
      tags:
        - Carts
      summary: Delete cart
      description: Delete an entire cart and return its products to inventory
      parameters:
        - in: path
          name: cartId
          required: true
          schema:
            type: string
            format: uuid
          description: MongoDB ObjectId of the cart
          example: "680cde050f7a995dadea207a"
      responses:
        "200":
          description: Cart deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cart deleted successfully"
                  data:
                    type: object
                    properties:
                      deletedCart:
                        $ref: "#/components/schemas/Cart"
                  error:
                    type: object
                    nullable: true
        "400":
          description: Cart not found or invalid status
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cannot delete cart with status: Confirmed"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many cart deletion attempts. Please try again after an hour."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error deleting cart"
                  error:
                    type: string
                    example: "Server error"      
      security:
        - BearerAuth: []

  /api/payment/verify-otp:
    post:
      tags:
        - Payment
      summary: Verify payment OTP
      description: >
        Verifies the OTP provided by the user against the stored OTP for payment confirmation.
        Rate-limited to 5 attempts every 15 minutes to prevent brute force attacks.
        Upon successful verification, the cart status is updated based on payment type.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - cartId
                - code
              properties:
                cartId:
                  type: string
                  format: uuid
                  description: MongoDB ObjectId of the cart
                  example: "60d21b4667d0d8992e610c87"
                code:
                  type: string
                  description: 6-digit OTP code received via WhatsApp
                  example: "123456"
      responses:
        "200":
          description: OTP verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "OTP verified successfully"
                  data:
                    type: object
                    properties:
                      cart:
                        $ref: "#/components/schemas/Cart"
                  error:
                    type: object
                    nullable: true
        "400":
          description: Invalid input or expired OTP
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "OTP has expired"
        "403":
          description: Invalid OTP code
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid OTP code"
        "429":
          description: Too many verification attempts
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many verification attempts. Please try again after 15 minutes."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Payment verification failed"
                  error:
                    type: string
                    example: "Database error"
      security:
        - BearerAuth: []

  /api/payment/resend-otp/{cartId}:
    patch:
      tags:
        - Payment
      summary: Resend payment verification OTP
      description: >
        Regenerates and resends a payment verification OTP to the user's registered phone number.
        Rate-limited to 2 requests every 10 minutes. Requires an existing OTP to have been sent.
        There must be at least 30 seconds between the original OTP and resend request.
      parameters:
        - in: path
          name: cartId
          required: true
          schema:
            type: string
            format: uuid
          description: MongoDB ObjectId of the cart
          example: "60d21b4667d0d8992e610c87"
      responses:
        "201":
          description: OTP resent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Otp is successfully sent to phone number: +201012345678"
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Baby-Guard payment verification code is: 105582. For your security, do not share this code. This OTP will expire in 2 minutes!"
                  error:
                    type: object
                    nullable: true
        "400":
          description: Invalid input or validation failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation failed"
                  errors:
                    type: object
                    properties:
                      cartId:
                        type: object
                        properties:
                          msg:
                            type: string
                            example: "No OTP exists for this cart. Use send-otp instead."
                          param:
                            type: string
                            example: "cartId"
                          location:
                            type: string
                            example: "params"
        "403":
          description: Cart not eligible for OTP resend
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "An OTP was just sent. Please wait at least 30 seconds before requesting a resend."
        "429":
          description: Too many OTP resend requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many resend attempts. Please try again after 10 minutes."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error updating payment otp"
                  error:
                    type: string
                    example: "Database connection error"
      security:
        - BearerAuth: []

  /api/payment/cancel/{cartId}:
    delete:
      tags:
        - Payment
      summary: Cancel payment and delete cart
      description: >
        Cancels a pending payment by deleting the cart and all associated products.
        This can only be done for carts with "Pending" status.
        Rate-limited to 5 requests every 15 minutes.
      parameters:
        - in: path
          name: cartId
          required: true
          schema:
            type: string
            format: uuid
          description: MongoDB ObjectId of the cart to cancel
          example: "60d21b4667d0d8992e610c87"
      responses:
        "200":
          description: Payment cancelled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Payment cancelled successfully"
                  data:
                    type: object
                    properties:
                      deletedCart:
                        $ref: "#/components/schemas/Cart"
        "400":
          description: Invalid input or cart cannot be cancelled
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cannot cancel a cart with status: Confirmed"
        "429":
          description: Too many cancellation attempts
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many cancellation attempts. Please try again after 15 minutes."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Failed to cancel payment"
                  error:
                    type: string
                    example: "Database connection error"
      security:
        - BearerAuth: []

  /api/auth/signup:
    post:
      tags:
        - Authentication
      summary: Register new user
      description: >
        Creates a new user account with the provided information.
        Rate-limited to 5 requests per 10 minutes per IP address.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - fName
                - lName
                - email
                - nationalIdNumer
                - birthDate
                - password
                - passwordConfirm
                - phoneNumber
                - governorate
                - street
                - city
                - buildingNumber
                - apartmentNumber
                - gender
              properties:
                fName:
                  type: string
                  description: First name (3-15 characters)
                  example: "Ahmed"
                lName:
                  type: string
                  description: Last name (3-15 characters)
                  example: "Mohamed"
                email:
                  type: string
                  format: email
                  description: Email address (must be unique)
                  example: "ahmed@example.com"
                nationalIdNumer:
                  type: string
                  description: National ID number (exactly 14 digits, must be unique)
                  example: "29912151234567"
                birthDate:
                  type: string
                  format: date
                  description: Date of birth
                  example: "1999-12-15"
                password:
                  type: string
                  format: password
                  description: Password (minimum 6 characters)
                  example: "securePassword123"
                passwordConfirm:
                  type: string
                  format: password
                  description: Confirm password (must match password)
                  example: "securePassword123"
                phoneNumber:
                  type: string
                  description: Phone number (Egyptian or Saudi Arabian format)
                  example: "+201012345678"
                governorate:
                  type: string
                  description: Governorate/province
                  example: "Cairo"
                city:
                  type: string
                  description: City
                  example: "Heliopolis"
                street:
                  type: string
                  description: Street address
                  example: "123 Main Street"
                buildingNumber:
                  type: integer
                  description: Building number
                  example: 42
                apartmentNumber:
                  type: integer
                  description: Apartment number
                  example: 5
                gender:
                  type: string
                  enum: ["male", "female"]
                  description: Gender
                  example: "male"
                profileImg:
                  type: string
                  format: binary
                  description: Profile image (optional)
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  token:
                    type: string
                    description: JWT authentication token
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  role:
                    type: string
                    example: "parent"
        "400":
          description: Invalid input or validation failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation failed"
                  errors:
                    type: object
                    properties:
                      email:
                        type: object
                        properties:
                          msg:
                            type: string
                            example: "Email already in use"
                          param:
                            type: string
                            example: "email"
                          location:
                            type: string
                            example: "body"
        "429":
          description: Too many registration attempts
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many signup attempts. Please try again in 10 minutes."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error creating user"
                  error:
                    type: string
                    example: "Internal server error"

  /api/auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: >
        Authenticates a user and returns a JWT token.
        Rate-limited to 10 requests per 5 minutes per IP address.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  description: Email address
                  example: "ahmed@example.com"
                password:
                  type: string
                  format: password
                  description: Password
                  example: "securePassword123"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  token:
                    type: string
                    description: JWT authentication token
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  role:
                    type: string
                    example: "parent"
        "400":
          description: Invalid input or validation failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation failed"
                  errors:
                    type: object
                    properties:
                      email:
                        type: object
                        properties:
                          msg:
                            type: string
                            example: "Email not found"
                          param:
                            type: string
                            example: "email"
                          location:
                            type: string
                            example: "body"
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Invalid email or password"
        "429":
          description: Too many login attempts
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many login attempts. Please try again in 5 minutes."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error during authentication"                  
                  error:
                    type: string
                    example: "Internal server error"

  /api/auth/updatePassword:
    put:
      tags:
        - Authentication
      summary: Update user password
      description: >
        Updates the password for the authenticated user.
        Requires the current password for verification.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - oldPassword
                - newPassword
                - passwordConfirm
              properties:
                oldPassword:
                  type: string
                  format: password
                  description: Current password (minimum 6 characters)
                  example: "currentPassword123"
                newPassword:
                  type: string
                  format: password
                  description: New password (minimum 6 characters)
                  example: "newSecurePassword456"
                passwordConfirm:
                  type: string
                  format: password
                  description: Confirm new password (must match newPassword)
                  example: "newSecurePassword456"
      responses:
        "200":
          description: Password updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Password updated successfully"
        "400":
          description: Invalid input or validation failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation failed"
                  errors:
                    type: object
                    properties:
                      oldPassword:
                        type: object
                        properties:
                          msg:
                            type: string
                            example: "old password is required"
                          param:
                            type: string
                            example: "oldPassword"
                          location:
                            type: string
                            example: "body"
        "401":
          description: Invalid current password
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Invalid current password"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error updating password"
                  error:
                    type: string
                    example: "Internal server error"
      security:
        - BearerAuth: []

  /api/vaccines/admin:
    post:
      tags:
        - Vaccines
      summary: Create new vaccine
      description: Add a new vaccine to the system (Admin only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - description
                - requiredAge
                - price
                - provider
              properties:
                name:
                  type: string
                  description: Vaccine name (2-100 characters)
                  example: "Polio Vaccine"
                description:
                  type: string
                  description: Vaccine description (20-1000 characters)
                  example: "Protects against poliomyelitis, a highly infectious viral disease that affects the nervous system and can cause permanent paralysis."
                requiredAge:
                  type: string
                  description: Age at which vaccine is required
                  enum:
                    - "No specific age required"
                    - "3 months"
                    - "6 months"
                    - "9 months"
                    - "1 year"
                    - "1 year and 3 months"
                    - "1 year and 6 months"
                    - "1 year and 9 months"
                    - "2 years"
                    - "2 years and 3 months"
                    - "2 years and 6 months"
                    - "2 years and 9 months"
                    - "3 years"
                    - "3 years and 3 months"
                    - "3 years and 6 months"
                    - "3 years and 9 months"
                    - "4 years"
                  example: "6 months"
                price:
                  type: number
                  format: float
                  description: Vaccine price (non-negative number)
                  example: 49.99
                provider:
                  type: string
                  format: uuid
                  description: MongoDB ObjectId of the vaccine provider
                  example: "60d21b4667d0d8992e610c85"
      responses:
        "201":
          description: Vaccine created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Vaccine is successfully created"
                  data:
                    $ref: "#/components/schemas/Vaccine"
                  error:
                    type: object
                    nullable: true
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation Failed!"
                  errors:
                    type: object
                    properties:
                      name:
                        type: object
                        properties:
                          msg:
                            type: string
                            example: "Name must be between 2 and 100 characters"
                      requiredAge:
                        type: object
                        properties:
                          msg:
                            type: string
                            example: "'5 years' is not a valid age requirement. Please choose from the predefined age options."
        "401":
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Unauthorized"
        "403":
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "You are not allowed to access this route"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many vaccine creation attempts. Please try again after an hour."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error inserting vaccine"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

  /api/vaccines/admin/{vaccineId}:
    delete:
      tags:
        - Vaccines
      summary: Delete vaccine
      description: Delete a vaccine from the system (Admin only)
      parameters:
        - in: path
          name: vaccineId
          required: true
          schema:
            type: string
            format: uuid
          description: MongoDB ObjectId of the vaccine to delete
          example: "60d21b4667d0d8992e610c86"
      responses:
        "200":
          description: Vaccine deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Vaccine is successfully deleted"
                  data:
                    $ref: "#/components/schemas/Vaccine"
                  error:
                    type: object
                    nullable: true
              examples:
                deletedVaccine:
                  summary: "Successfully deleted vaccine"
                  value:
                    message: "Vaccine is successfully deleted"
                    data:
                      _id: "60d21b4667d0d8992e610c86"
                      name: "Polio Vaccine"
                      description: "Protects against poliomyelitis, a highly infectious viral disease that affects the nervous system and can cause permanent paralysis."
                      requiredAge: "6 months"
                      price: 49.99
                      provider: "60d21b4667d0d8992e610c85"
                    error: null
        "400":
          description: Invalid input or validation failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation Failed!"
                  errors:
                    type: object
                    properties:
                      vaccineId:
                        type: object
                        properties:
                          msg:
                            type: string
                            example: "Vaccine not found"
                          param:
                            type: string
                            example: "vaccineId"
                          location:
                            type: string
                            example: "params"
        "401":
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Unauthorized"
        "403":
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "You are not allowed to access this route"
        "404":
          description: Vaccine not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Vaccine with id: 60d21b4667d0d8992e610c86 not found"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many vaccine deletion attempts. Please try again after 5 minutes."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error deleting vaccine"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []      

  /api/vaccines:
    get:
      tags:
        - Vaccines
      summary: Get all vaccines
      description: Retrieve all available vaccines for parents
      responses:
        "200":
          description: Vaccines retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Vaccines retrieved successfully"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Vaccine"
                  error:
                    type: object
                    nullable: true
        "401":
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Unauthorized"
        "404":
          description: No vaccines found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Unauthorized"
        "404":
          description: No confirmed or waiting carts found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No confirmed or waiting carts found for this user"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many cart status retrieval attempts. Please try again after a minute."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error retrieving user's confirmed and waiting carts"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

  /api/carts/{cartId}/products:
    post:
      tags:
        - Carts
      summary: Add product to cart
      description: >
        Add a product to an existing pending cart. Automatically updates cart totals and product inventory.
        Products cannot be added to the same cart twice - use quantity update instead.
      parameters:
        - in: path
          name: cartId
          required: true
          schema:
            type: string
            format: uuid
          description: MongoDB ObjectId of the cart
          example: "680cde050f7a995dadea207a"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - productId
                - quantity
              properties:
                productId:
                  type: string
                  format: uuid
                  description: MongoDB ObjectId of the product to add
                  example: "6803e59f5cfbd3f8d54aaec9"
                quantity:
                  type: integer
                  minimum: 1
                  description: Quantity of the product
                  example: 2
      responses:
        "201":
          description: Product successfully added to cart
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product is successfully added to cart"
                  data:
                    $ref: "#/components/schemas/CartProduct"
                  error:
                    type: object
                    nullable: true
        "400":
          description: Invalid input or validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation Failed!"
                  errors:
                    type: object
                    properties:
                      cartId:
                        type: object
                        properties:
                          msg:
                            type: string
                            example: "Cart not found, does not belong to you, or is not in 'Pending' status"
                      productId:
                        type: object
                        properties:
                          msg:
                            type: string
                            example: "This product is already in your cart. Use the update quantity endpoint instead."
                      quantity:
                        type: object
                        properties:
                          msg:
                            type: string
                            example: "Insufficient inventory. Only 5 units available."
        "401":
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Unauthorized"
        "404":
          description: Cart or product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product with ID 6803e59f5cfbd3f8d54aaec9 not found"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many product addition attempts. Please try again after a minute."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error adding product to cart"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

  /api/carts/{cartId}/products/{productId}:
    delete:
      tags:
        - Carts
      summary: Remove product from cart
      description: >
        Remove a specific product from a cart and automatically update cart totals and return product quantity to inventory.
      parameters:
        - in: path
          name: cartId
          required: true
          schema:
            type: string
            format: uuid
          description: MongoDB ObjectId of the cart
          example: "680cde050f7a995dadea207a"
        - in: path
          name: productId
          required: true
          schema:
            type: string
            format: uuid
          description: MongoDB ObjectId of the product to remove
          example: "6803e59f5cfbd3f8d54aaec9"
      responses:
        "200":
          description: Product successfully removed from cart
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product removed from cart successfully"
                  data:
                    $ref: "#/components/schemas/CartProduct"
                  error:
                    type: object
                    nullable: true
        "400":
          description: Invalid input or validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User vaccine requests retrieved successfully"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/VaccineRequest"
                  error:
                    type: object
                    properties:
                      cartId:
                        type: object
                        properties:
                          msg:
                            type: string
                            example: "Cart not found, does not belong to you, or is not in 'Pending' status"
                      productId:
                        type: object
                        properties:
                          msg:
                            type: string
                            example: "Product not found in this cart"
        "401":
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Unauthorized"
        "404":
          description: Cart, product, or cart product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product not found in this cart"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many product removal attempts. Please try again after a minute."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error removing product from cart"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

    patch:
      tags:
        - Carts
      summary: Update product quantity in cart
      description: >
        Update the quantity of a product in a cart. Automatically adjusts cart totals and product inventory.
        Validates that sufficient inventory is available for quantity increases.
      parameters:
        - in: path
          name: cartId
          required: true
          schema:
            type: string
            format: uuid
          description: MongoDB ObjectId of the cart
          example: "680cde050f7a995dadea207a"
        - in: path
          name: productId
          required: true
          schema:
            type: string
            format: uuid
          description: MongoDB ObjectId of the product
          example: "6803e59f5cfbd3f8d54aaec9"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - quantity
              properties:
                quantity:
                  type: integer
                  minimum: 1
                  description: New quantity for the product
                  example: 3
      responses:
        "200":
          description: Product quantity updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cart product quantity updated successfully"
                  data:
                    $ref: "#/components/schemas/CartProduct"
                  error:
                    type: object
                    nullable: true
        "400":
          description: Invalid quantity or insufficient inventory
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation failed"
                  errors:
                    type: object
                    properties:
                      quantity:
                        type: object
                        properties:
                          msg:
                            type: string
                            example: "Insufficient inventory. Only 5 additional units available."
        "401":
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Unauthorized"
        "404":
          description: Cart, product, or cart product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product not found in this cart"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many quantity update attempts. Please try again after a minute."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error updating product quantity"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

  /api/carts/{cartId}:
    delete:
      tags:
        - Carts
      summary: Delete cart
      description: Delete an entire cart and return its products to inventory
      parameters:
        - in: path
          name: cartId
          required: true
          schema:
            type: string
            format: uuid
          description: MongoDB ObjectId of the cart
          example: "680cde050f7a995dadea207a"
      responses:
        "200":
          description: Cart deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cart deleted successfully"
                  data:
                    type: object
                    properties:
                      deletedCart:
                        $ref: "#/components/schemas/Cart"
                  error:
                    type: object
                    nullable: true
        "400":
          description: Cart not found or invalid status
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cannot delete cart with status: Confirmed"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many cart deletion attempts. Please try again after an hour."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error deleting cart"
                  error:
                    type: string
                    example: "Server error"      
      security:
        - BearerAuth: []

  /api/payment/verify-otp:
    post:
      tags:
        - Payment
      summary: Verify payment OTP
      description: >
        Verifies the OTP provided by the user against the stored OTP for payment confirmation.
        Rate-limited to 5 attempts every 15 minutes to prevent brute force attacks.
        Upon successful verification, the cart status is updated based on payment type.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - cartId
                - code
              properties:
                cartId:
                  type: string
                  format: uuid
                  description: MongoDB ObjectId of the cart
                  example: "60d21b4667d0d8992e610c87"
                code:
                  type: string
                  description: 6-digit OTP code received via WhatsApp
                  example: "123456"
      responses:
        "200":
          description: OTP verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "OTP verified successfully"
                  data:
                    type: object
                    properties:
                      cart:
                        $ref: "#/components/schemas/Cart"
                  error:
                    type: object
                    nullable: true
        "400":
          description: Invalid input or expired OTP
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "OTP has expired"
        "403":
          description: Invalid OTP code
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "Invalid OTP code"
        "429":
          description: Too many verification attempts
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many verification attempts. Please try again after 15 minutes."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Payment verification failed"
                  error:
                    type: string
                    example: "Database error"
      security:
        - BearerAuth: []

  /api/payment/resend-otp/{cartId}:
    patch:
      tags:
        - Payment
      summary: Resend payment verification OTP
      description: >
        Regenerates and resends a payment verification OTP to the user's registered phone number.
        Rate-limited to 2 requests every 10 minutes. Requires an existing OTP to have been sent.
        There must be at least 30 seconds between the original OTP and resend request.
      parameters:
        - in: path
          name: cartId
          required: true
          schema:
            type: string
            format: uuid
          description: MongoDB ObjectId of the cart
          example: "60d21b4667d0d8992e610c87"
      responses:
        "201":
          description: OTP resent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Otp is successfully sent to phone number: +201012345678"
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Baby-Guard payment verification code is: 105582. For your security, do not share this code. This OTP will expire in 2 minutes!"
                  error:
                    type: object
                    nullable: true
        "400":
          description: Invalid input or validation failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation failed"
                  errors:
                    type: object
                    properties:
                      cartId:
                        type: object
                        properties:
                          msg:
                            type: string
                            example: "No OTP exists for this cart. Use send-otp instead."
                          param:
                            type: string
                            example: "cartId"
                          location:
                            type: string
                            example: "params"
        "403":
          description: Cart not eligible for OTP resend
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "An OTP was just sent. Please wait at least 30 seconds before requesting a resend."
        "429":
          description: Too many OTP resend requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many resend attempts. Please try again after 10 minutes."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error updating payment otp"
                  error:
                    type: string
                    example: "Database connection error"
      security:
        - BearerAuth: []

  /api/payment/cancel/{cartId}:
    delete:
      tags:
        - Payment
      summary: Cancel payment and delete cart
      description: >
        Cancels a pending payment by deleting the cart and all associated products.
        This can only be done for carts with "Pending" status.
        Rate-limited to 5 requests every 15 minutes.
      parameters:
        - in: path
          name: cartId
          required: true
          schema:
            type: string
            format: uuid
          description: MongoDB ObjectId of the cart to cancel
          example: "60d21b4667d0d8992e610c87"
      responses:
        "200":
          description: Payment cancelled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Payment cancelled successfully"
                  data:
                    type: object
                    properties:
                      deletedCart:
                        $ref: "#/components/schemas/Cart"
        "400":
          description: Invalid input or cart cannot be cancelled
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cannot cancel a cart with status: Confirmed"
        "429":
          description: Too many cancellation attempts
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many cancellation attempts. Please try again after 15 minutes."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Failed to cancel payment"
                  error:
                    type: string
                    example: "Database connection error"
      security:
        - BearerAuth: []

  /api/auth/signup:
    post:
      tags:
        - Authentication
      summary: Register new user
      description: >
        Creates a new user account with the provided information.
        Rate-limited to 5 requests per 10 minutes per IP address.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - fName
                - lName
                - email
                - nationalIdNumer
                - birthDate
                - password
                - passwordConfirm
                - phoneNumber
                - governorate
                - street
                - city
                - buildingNumber
                - apartmentNumber
                - gender
              properties:
                fName:
                  type: string
                  description: First name (3-15 characters)
                  example: "Ahmed"
                lName:
                  type: string
                  description: Last name (3-15 characters)
                  example: "Mohamed"
                email:
                  type: string
                  format: email
                  description: Email address (must be unique)
                  example: "ahmed@example.com"
                nationalIdNumer:
                  type: string
                  description: National ID number (exactly 14 digits, must be unique)
                  example: "29912151234567"
                birthDate:
                  type: string
                  format: date
                  description: Date of birth
                  example: "1999-12-15"
                password:
                  type: string
                  format: password
                  description: Password (minimum 6 characters)
                  example: "securePassword123"
                passwordConfirm:
                  type: string
                  format: password
                  description: Confirm password (must match password)
                  example: "securePassword123"
                phoneNumber:
                  type: string
                  description: Phone number (Egyptian or Saudi Arabian format)
                  example: "+201012345678"
                governorate:
                  type: string
                  description: Governorate/province
                  example: "Cairo"
                city:
                  type: string
                  description: City
                  example: "Heliopolis"
                street:
                  type: string
                  description: Street address
                  example: "123 Main Street"
                buildingNumber:
                  type: integer
                  description: Building number
                  example: 42
                apartmentNumber:
                  type: integer
                  description: Apartment number
                  example: 5
                gender:
                  type: string
                  enum: ["male", "female"]
                  description: Gender
                  example: "male"
                profileImg:
                  type: string
                  format: binary
                  description: Profile image (optional)
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  token:
                    type: string
                    description: JWT authentication token
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  role:
                    type: string
                    example: "parent"
        "400":
          description: Invalid input or validation failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Validation failed"
                  errors:
                    type: object
                    properties:
                      email:
                        type: object
                        properties:
                          msg:
                            type: string
                            example: "Email already in use"
                          param:
                            type: string
                            example: "email"
                          location:
                            type: string
                            example: "body"
        "429":
          description: Too many registration attempts
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Too many signup attempts. Please try again in 10 minutes."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error creating user"
                  error:
                    type: string
                    example: "Internal server error"

  /api/auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: >
        Authenticates a user and returns a JWT token.
        Rate-limited to 10 requests per 5 minutes per IP address.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  description: Email address
                  example: "ahmed@example.com"
                password:
                  type: string
                  format: password
                  description: Password
                  example: "securePassword123"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  token:
                    type: string
                    description: JWT authentication token
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  role:
                    type: string
                    example: "parent"
        "400":
          description: Invalid input or validation failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation failed"
                  errors:
                    type: object
                    properties:
                      email:
                        type: object
                        properties:
                          msg:
                            type: string
                            example: "Email not found"
                          param:
                            type: string
                            example: "email"
                          location:
                            type: string
                            example: "body"
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Invalid email or password"
        "429":
          description: Too many login attempts
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many login attempts. Please try again in 5 minutes."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error during authentication"                  
                  error:
                    type: string
                    example: "Internal server error"

  /api/auth/updatePassword:
    put:
      tags:
        - Authentication
      summary: Update user password
      description: >
        Updates the password for the authenticated user.
        Requires the current password for verification.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - oldPassword
                - newPassword
                - passwordConfirm
              properties:
                oldPassword:
                  type: string
                  format: password
                  description: Current password (minimum 6 characters)
                  example: "currentPassword123"
                newPassword:
                  type: string
                  format: password
                  description: New password (minimum 6 characters)
                  example: "newSecurePassword456"
                passwordConfirm:
                  type: string
                  format: password
                  description: Confirm new password (must match newPassword)
                  example: "newSecurePassword456"
      responses:
        "200":
          description: Password updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Password updated successfully"
        "400":
          description: Invalid input or validation failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation failed"
                  errors:
                    type: object
                    properties:
                      oldPassword:
                        type: object
                        properties:
                          msg:
                            type: string
                            example: "old password is required"
                          param:
                            type: string
                            example: "oldPassword"
                          location:
                            type: string
                            example: "body"
        "401":
          description: Invalid current password
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Invalid current password"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error updating password"
                  error:
                    type: string
                    example: "Internal server error"
      security:
        - BearerAuth: []

  /api/vaccines/admin:
    post:
      tags:
        - Vaccines
      summary: Create new vaccine
      description: Add a new vaccine to the system (Admin only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - description
                - requiredAge
                - price
                - provider
              properties:
                name:
                  type: string
                  description: Vaccine name (2-100 characters)
                  example: "Polio Vaccine"
                description:
                  type: string
                  description: Vaccine description (20-1000 characters)
                  example: "Protects against poliomyelitis, a highly infectious viral disease that affects the nervous system and can cause permanent paralysis."
                requiredAge:
                  type: string
                  description: Age at which vaccine is required
                  enum:
                    - "No specific age required"
                    - "3 months"
                    - "6 months"
                    - "9 months"
                    - "1 year"
                    - "1 year and 3 months"
                    - "1 year and 6 months"
                    - "1 year and 9 months"
                    - "2 years"
                    - "2 years and 3 months"
                    - "2 years and 6 months"
                    - "2 years and 9 months"
                    - "3 years"
                    - "3 years and 3 months"
                    - "3 years and 6 months"
                    - "3 years and 9 months"
                    - "4 years"
                  example: "6 months"
                price:
                  type: number
                  format: float
                  description: Vaccine price (non-negative number)
                  example: 49.99
                provider:
                  type: string
                  format: uuid
                  description: MongoDB ObjectId of the vaccine provider
                  example: "60d21b4667d0d8992e610c85"
      responses:
        "201":
          description: Vaccine created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Vaccine is successfully created"
                  data:
                    $ref: "#/components/schemas/Vaccine"
                  error:
                    type: object
                    nullable: true
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation Failed!"
                  errors:
                    type: object
                    properties:
                      name:
                        type: object
                        properties:
                          msg:
                            type: string
                            example: "Name must be between 2 and 100 characters"
                      requiredAge:
                        type: object
                        properties:
                          msg:
                            type: string
                            example: "'5 years' is not a valid age requirement. Please choose from the predefined age options."
        "401":
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Unauthorized"
        "403":
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "You are not allowed to access this route"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many vaccine creation attempts. Please try again after an hour."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error inserting vaccine"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

  /api/vaccines/admin/{vaccineId}:
    delete:
      tags:
        - Vaccines
      summary: Delete vaccine
      description: Delete a vaccine from the system (Admin only)
      parameters:
        - in: path
          name: vaccineId
          required: true
          schema:
            type: string
            format: uuid
          description: MongoDB ObjectId of the vaccine to delete
          example: "60d21b4667d0d8992e610c86"
      responses:
        "200":
          description: Vaccine deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Vaccine is successfully deleted"
                  data:
                    $ref: "#/components/schemas/Vaccine"
                  error:
                    type: object
                    nullable: true
              examples:
                deletedVaccine:
                  summary: "Successfully deleted vaccine"
                  value:
                    message: "Vaccine is successfully deleted"
                    data:
                      _id: "60d21b4667d0d8992e610c86"
                      name: "Polio Vaccine"
                      description: "Protects against poliomyelitis, a highly infectious viral disease that affects the nervous system and can cause permanent paralysis."
                      requiredAge: "6 months"
                      price: 49.99
                      provider: "60d21b4667d0d8992e610c85"
                    error: null
        "400":
          description: Invalid input or validation failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation Failed!"
                  errors:
                    type: object
                    properties:
                      vaccineId:
                        type: object
                        properties:
                          msg:
                            type: string
                            example: "Vaccine not found"
                          param:
                            type: string
                            example: "vaccineId"
                          location:
                            type: string
                            example: "params"
        "401":
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Unauthorized"
        "403":
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "You are not allowed to access this route"
        "404":
          description: Vaccine not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Vaccine with id: 60d21b4667d0d8992e610c86 not found"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many vaccine deletion attempts. Please try again after 5 minutes."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error deleting vaccine"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []      

  /api/vaccines:
    get:
      tags:
        - Vaccines
      summary: Get all vaccines
      description: Retrieve all available vaccines for parents
      responses:
        "200":
          description: Vaccines retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Vaccines retrieved successfully"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Vaccine"
                  error:
                    type: object
                    nullable: true
        "401":
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Unauthorized"
        "404":
          description: No vaccines found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No vaccines found"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many vaccine retrieval attempts. Please try again after a minute."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error fetching vaccines"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

  /api/provider/admin/add:
    post:
      tags:
        - Providers
      summary: Create new provider
      description: Add a new vaccine provider to the system (Admin only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - phone
                - city
                - governorate
                - district
                - workHours
              properties:
                name:
                  type: string
                  description: Provider name (2-100 characters)
                  example: "Health Ministry"
                phone:
                  type: string
                  description: Provider phone number (must be unique and valid EG/SA format)
                  example: "+201012345678"
                city:
                  type: string
                  description: Provider city
                  example: "Cairo"
                governorate:
                  type: string
                  description: Provider governorate
                  example: "Cairo"
                district:
                  type: string
                  description: Provider district
                  example: "Nasr City"
                workHours:
                  type: string
                  description: Provider working hours (2-20 characters)
                  example: "9 AM to 5 PM"
      responses:
        "201":
          description: Provider created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "provider is successfully created"
                  data:
                    $ref: "#/components/schemas/Provider"
                  error:
                    type: object
                    nullable: true
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation Failed!"
                  errors:
                    type: object
                    properties:
                      name:
                        type: object
                        properties:
                          msg:
                            type: string
                            example: "Provider name must be at least 2 characters"
                      phone:
                        type: object
                        properties:
                          msg:
                            type: string
                            example: "Invalid phone number, only accept EG and SA phone numbers"
        "401":
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Unauthorized"
        "403":
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "You are not allowed to access this route"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many adding new providers attempts, Try again after 5 minutes."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error inserting provider"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

  /api/vaccine-requests:
    post:
      tags:
        - Vaccine Requests
      summary: Create new vaccine request
      description: >
        Submit a request for a child to receive a specific vaccine. 
        Includes details such as vaccination date and address for the service.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - childId
                - vaccineId
                - vaccinationDate
                - governorate
                - city
                - street
                - buildingNumber
                - apartmentNumber
              properties:
                childId:
                  type: string
                  format: uuid
                  description: MongoDB ObjectId of the child
                  example: "60d21b4667d0d8992e610c88"
                vaccineId:
                  type: string
                  format: uuid
                  description: MongoDB ObjectId of the vaccine
                  example: "60d21b4667d0d8992e610c86"
                vaccinationDate:
                  type: string
                  format: date
                  description: Requested date for vaccination (must be a future date)
                  example: "2025-05-20"
                phoneNumber:
                  type: string
                  description: Phone number of the parent
                  example: "+201015411320"  
                governorate:
                  type: string
                  description: Address governorate (4-30 characters)
                  example: "Cairo"
                city:
                  type: string
                  description: Address city (4-50 characters)
                  example: "Nasr City"
                street:
                  type: string
                  description: Address street (4-100 characters)
                  example: "Abbas El-Akkad St"
                buildingNumber:
                  type: integer
                  description: Building number (positive integer)
                  example: 42
                apartmentNumber:
                  type: integer
                  description: Apartment number (positive integer)
                  example: 5
      responses:
        "201":
          description: Vaccine request created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Vaccine Request is successfully created"
                  data:
                    $ref: "#/components/schemas/VaccineRequest"
                  error:
                    type: object
                    nullable: true
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation Failed!"
                  errors:
                    type: object
                    properties:
                      childId:
                        type: object
                        properties:
                          msg:
                            type: string
                            example: "Child does not belong to you"
                      vaccinationDate:
                        type: object
                        properties:
                          msg:
                            type: string
                            example: "Vaccination date cannot be in the past"
        "401":
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Unauthorized"
        "404":
          description: Child or vaccine not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Child not found"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many vaccine request submissions. Please try again after 5 minutes."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error inserting vaccine request"
                  error:
                    type: string
                    example: "Server error"      
      security:
        - BearerAuth: []

    get:
      tags:
        - Vaccine Requests
      summary: Get user's vaccine requests
      description: >
        Retrieve all vaccine requests created by the authenticated user.
        Returns requests for all children belonging to the parent.
      responses:
        "200":
          description: User vaccine requests retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User vaccine requests retrieved successfully"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/VaccineRequest"
                  error:
                    type: object
                    nullable: true
        "401":
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Unauthorized"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many vaccine request retrieval attempts. Please try again after a minute."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error fetching user vaccine requests"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

  /api/vaccine-requests/admin:
    get:
      tags:
        - Vaccine Requests
      summary: Get all vaccine requests
      description: Retrieve all vaccine requests (Admin only)
      responses:
        "200":
          description: Vaccine requests retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Vaccine Requests retrieved successfully"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/VaccineRequest"
                  error:
                    type: object
                    nullable: true
        "401":
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Unauthorized"
        "403":
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "You are not allowed to access this route"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many vaccine request retrieval attempts. Please try again after a minute."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error fetching vaccine requests"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

  /api/child/:
    post:
      tags:
        - Children
      summary: Add new child
      description: Add a new child to the currently authenticated parent's account
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - name
                - birthDate
                - gender
                - bloodType
                - ssn
                - birthCertificate
              properties:
                name:
                  type: string
                  description: Child's name
                  example: "Ahmed Mohamed"
                birthDate:
                  type: string
                  format: date
                  description: Child's date of birth
                  example: "2020-01-15"
                gender:
                  type: string
                  enum: ["male", "female"]
                  description: Child's gender
                  example: "male"
                bloodType:
                  type: string
                  enum: ["A+", "A-", "B+", "B-", "AB+", "AB-", "O+", "O-"]
                  description: Child's blood type
                  example: "O+"
                ssn:
                  type: string
                  description: Child's social security number (exactly 14 digits, must be unique)
                  example: "30001152345678"
                birthCertificate:
                  type: string
                  format: binary
                  description: Child's birth certificate document (image file)
      responses:
        "201":
          description: Child added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Child is successfully created"
                  data:
                    $ref: "#/components/schemas/Child"
                  error:
                    type: object
                    nullable: true
        "400":
          description: Invalid input or missing birth certificate
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "birth certificate is required"
        "401":
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Unauthorized"
        "409":
          description: Conflict - SSN already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation Failed!"
                  errors:
                    type: object
                    properties:
                      ssn:
                        type: object
                        properties:
                          msg:
                            type: string
                            example: "SSN already exists"
                          param:
                            type: string
                            example: "ssn"
                          location:
                            type: string
                            example: "body"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error inserting child"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []
        
  /api/child/admin:
    get:
      tags:
        - Children
      summary: Get all children (Admin only)
      description: Retrieve a paginated list of all children in the system using cursor-based pagination
      parameters:
        - in: query
          name: cursor
          schema:
            type: string
          description: MongoDB ObjectId of the last child from previous page
          example: "60d21b4667d0d8992e610c85"
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Number of children per page
          example: 10
      responses:
        "200":
          description: Children retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Children are successfully retrieved"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Child"
                  nextCursor:
                    type: string
                    nullable: true
                    description: ObjectId of the last item, use for next page request
                    example: "60d21b4667d0d8992e610c86"
                  error:
                    type: object
                    nullable: true
        "401":
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Unauthorized"
        "403":
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "You are not allowed to access this route"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error getting all children"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

  /api/child/me:
    get:
      tags:
        - Children
      summary: Get current user's children
      description: Retrieve all children associated with the currently authenticated user
      responses:
        "200":
          description: Children retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Children are successfully retrieved"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Child"
                  error:
                    type: object
                    nullable: true
        "401":
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Unauthorized"
        "404":
          description: No children found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "current user has no children"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error fetching paginated children"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

  /api/child/{id}:
    delete:
      tags:
        - Children
      summary: Delete child
      description: Delete a child by ID (only the parent who owns the child can delete it)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: MongoDB ObjectId of the child to delete
          example: "60d21b4667d0d8992e610c86"
      responses:
        "200":
          description: Child deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Child is successfully deleted"
                  data:
                    $ref: "#/components/schemas/Child"
                  error:
                    type: object
                    nullable: true
        "401":
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Unauthorized"
        "404":
          description: Child not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "child not found"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error deleting child"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

  /api/user/me:
    get:
      tags:
        - User
      summary: Get current user profile
      description: Retrieves the profile information of the currently authenticated user
      responses:
        "200":
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  user:
                    $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Unauthorized"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "User not found"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error retrieving user profile"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

  /api/complaints:
    post:
      tags:
        - Complaints
      summary: Create new complaint
      description: Submit a new complaint or suggestion to the system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - message
                - type
              properties:
                message:
                  type: string
                  description: Complaint or suggestion message (10-5000 characters)
                  example: "I experienced difficulties accessing the vaccine booking system. The page keeps loading indefinitely and I cannot complete my child's vaccination appointment."
                type:
                  type: string
                  enum: ["Complaint", "Suggestion"]
                  description: Type of feedback being submitted
                  example: "Complaint"
      responses:
        "201":
          description: Complaint created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Complaint is successfully created"
                  data:
                    $ref: "#/components/schemas/Complaint"
                  error:
                    type: object
                    nullable: true
              examples:
                newComplaint:
                  summary: "Successfully created complaint"
                  value:
                    message: "Complaint is successfully created"
                    data:
                      _id: "60d21b4667d0d8992e610c91"
                      userId: "60d21b4667d0d8992e610c84"
                      message: "I experienced difficulties accessing the vaccine booking system. The page keeps loading indefinitely and I cannot complete my child's vaccination appointment."
                      type: "Complaint"
                      createdAt: "2025-05-28T14:30:45Z"
                      updatedAt: "2025-05-28T14:30:45Z"
        "400":
          description: Invalid input or validation failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation failed"
                  errors:
                    type: object
                    properties:
                      message:
                        type: object
                        properties:
                          msg:
                            type: string
                            example: "Message must be between 10 and 5000 characters"
                          param:
                            type: string
                            example: "message"
                          location:
                            type: string
                            example: "body"
                      type:
                        type: object
                        properties:
                          msg:
                            type: string
                            example: "Invalid complaint type. Must be one of: Complaint, Suggestion"
                          param:
                            type: string
                            example: "type"
                          location:
                            type: string
                            example: "body"
        "401":
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Unauthorized"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many complaint submissions. Please try again after 15 minutes."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error creating complaint"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

  /api/complaints/admin:
    get:
      tags:
        - Complaints
      summary: Get all complaints (Admin only)
      description: Retrieve all complaints and suggestions submitted by users with user details
      responses:
        "200":
          description: Complaints retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Complaints retrieved successfully"
                  data:
                    type: array
                    items:
                      allOf:
                        - $ref: "#/components/schemas/Complaint"
                        - type: object
                          properties:
                            user:
                              type: object
                              properties:
                                _id:
                                  type: string
                                  format: uuid
                                  example: "60d21b4667d0d8992e610c84"
                                fName:
                                  type: string
                                  example: "Ahmed"
                                lName:
                                  type: string
                                  example: "Mohamed"
                                email:
                                  type: string
                                  example: "ahmed@example.com"
                                phoneNumber:
                                  type: string
                                  example: "+201012345678"
                  error:
                    type: object
                    nullable: true
              examples:
                complaintsList:
                  summary: "List of complaints with user details"
                  value:
                    message: "Complaints retrieved successfully"
                    data:
                      - _id: "60d21b4667d0d8992e610c91"
                        message: "I experienced difficulties accessing the vaccine booking system. The page keeps loading indefinitely and I cannot complete my child's vaccination appointment."
                        type: "Complaint"
                        user:
                          _id: "60d21b4667d0d8992e610c84"
                          fName: "Ahmed"
                          lName: "Mohamed"
                          email: "ahmed@example.com"
                          phoneNumber: "+201012345678"
                        createdAt: "2025-05-28T14:30:45Z"
                        updatedAt: "2025-05-28T14:30:45Z"
                      - _id: "60d21b4667d0d8992e610c92"
                        message: "It would be great if you could add a mobile app for easier access to vaccination schedules and reminders."
                        type: "Suggestion"
                        user:
                          _id: "60d21b4667d0d8992e610c85"
                          fName: "Sara"
                          lName: "Ali"
                          email: "sara@example.com"
                          phoneNumber: "+201098765432"
                        createdAt: "2025-05-27T09:15:30Z"
                        updatedAt: "2025-05-27T09:15:30Z"
                    error: null
        "401":
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Unauthorized"        
          "403":
            description: Forbidden - Admin access required
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "You are not allowed to access this route"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error retrieving complaints"
                  error:
                    type: string
                    example: "Server error"      
                    security:
                     - BearerAuth: []

  /api/products-reviews/{productId}:
    post:
      tags:
        - Product Reviews
      summary: Create product review
      description: Add a new review for a specific product
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the product to review
          example: "60d21b4667d0d8992e610c85"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - message
                - rating
              properties:
                message:
                  type: string
                  description: Review message (10-1000 characters)
                  example: "Great product! My child loves it and it's very effective."
                rating:
                  type: integer
                  minimum: 1
                  maximum: 5
                  description: Product rating from 1 to 5
                  example: 5
      responses:
        "201":
          description: Review created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product review is successfully created"
                  data:
                    $ref: "#/components/schemas/ProductReview"
                  error:
                    type: object
                    nullable: true
        "400":
          description: Invalid input or review already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You have already reviewed this product"
        "404":
          description: Product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product not found"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many review creation attempts. Please try again after 10 minutes."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error creating product review"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

  /api/products-reviews/{reviewId}:
    delete:
      tags:
        - Product Reviews
      summary: Delete product review
      description: Delete a specific product review (Admin only or review owner)
      parameters:
        - in: path
          name: reviewId
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the review to delete
          example: "60d21b4667d0d8992e610c87"
      responses:
        "200":
          description: Review deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product review is successfully deleted"
                  data:
                    type: object
                    nullable: true
                  error:
                    type: object
                    nullable: true
        "404":
          description: Review not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product review not found"
        "403":
          description: Forbidden - Cannot delete other users' reviews
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You can only delete your own reviews"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many review deletion attempts. Please try again after 5 minutes."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error deleting product review"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

  /api/payment/send-otp/{cartId}:
    get:
      tags:
        - Payment
      summary: Send payment OTP
      description: Send WhatsApp OTP for cart payment verification
      parameters:
        - in: path
          name: cartId
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the cart to process payment
          example: "60d21b4667d0d8992e610c85"
      responses:
        "200":
          description: OTP sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "OTP sent successfully"
                  data:
                    type: object
                    properties:
                      cartId:
                        type: string
                        format: uuid
                        example: "60d21b4667d0d8992e610c85"
                      phoneNumber:
                        type: string
                        example: "+201012345678"
                  error:
                    type: object
                    nullable: true
        "400":
          description: Invalid request or cart not eligible for payment
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cart is not pending or cart not found"
        "404":
          description: Cart not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cart not found"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many OTP requests. Please try again after 1 minute."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error sending OTP"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

  /api/payment/verify-otp:
    post:
      tags:
        - Payment
      summary: Verify payment OTP
      description: Verify WhatsApp OTP and complete payment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - cartId
                - otp
              properties:
                cartId:
                  type: string
                  format: uuid
                  description: ID of the cart to verify payment
                  example: "60d21b4667d0d8992e610c85"
                otp:
                  type: string
                  description: 6-digit OTP code
                  example: "123456"
      responses:
        "200":
          description: Payment verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Payment verified successfully"
                  data:
                    type: object
                    properties:
                      cartId:
                        type: string
                        format: uuid
                        example: "60d21b4667d0d8992e610c85"
                      status:
                        type: string
                        example: "Online paid"
                      totalPrice:
                        type: number
                        format: float
                        example: 299.99
                  error:
                    type: object
                    nullable: true
        "400":
          description: Invalid OTP or expired
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid or expired OTP"
        "404":
          description: Cart or OTP not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cart not found or OTP not found"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many OTP verification attempts. Please try again after 5 minutes."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error verifying OTP"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

  /api/payment/resend-otp/{cartId}:
    patch:
      tags:
        - Payment
      summary: Resend payment OTP
      description: Resend WhatsApp OTP for cart payment verification
      parameters:
        - in: path
          name: cartId
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the cart to resend OTP
          example: "60d21b4667d0d8992e610c85"
      responses:
        "200":
          description: OTP resent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "OTP resent successfully"
                  data:
                    type: object
                    properties:
                      cartId:
                        type: string
                        format: uuid
                        example: "60d21b4667d0d8992e610c85"
                      phoneNumber:
                        type: string
                        example: "+201012345678"
                  error:
                    type: object
                    nullable: true
        "400":
          description: Invalid request or no existing OTP
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No OTP found for this cart"
        "404":
          description: Cart not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cart not found"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many resend OTP attempts. Please try again after 2 minutes."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error resending OTP"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

  /api/payment/cancel/{cartId}:
    delete:
      tags:
        - Payment
      summary: Cancel payment
      description: Cancel payment process and remove OTP
      parameters:
        - in: path
          name: cartId
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the cart to cancel payment
          example: "60d21b4667d0d8992e610c85"
      responses:
        "200":
          description: Payment cancelled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Payment cancelled successfully"
                  data:
                    type: object
                    nullable: true
                  error:
                    type: object
                    nullable: true
        "404":
          description: Cart not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cart not found"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many payment cancellation attempts. Please try again after 1 minute."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error cancelling payment"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

  /api/carts/payment-type/{cartId}:
    patch:
      tags:
        - Carts
      summary: Modify cart payment type
      description: Change the payment method for a pending cart
      parameters:
        - in: path
          name: cartId
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the cart to modify payment type
          example: "60d21b4667d0d8992e610c85"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - paymentType
              properties:
                paymentType:
                  type: string
                  enum: ["Cash", "Online"]
                  description: New payment method for the cart
                  example: "Online"
      responses:
        "200":
          description: Payment type updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cart payment type updated successfully"
                  data:
                    $ref: "#/components/schemas/Cart"
                  error:
                    type: object
                    nullable: true
        "400":
          description: Invalid payment type or cart not eligible
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid payment type or cart is not pending"
        "404":
          description: Cart not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cart not found"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many payment type modification attempts. Please try again after 1 minute."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error updating cart payment type"
                  error:
                    type: string
                    example: "Server error"      
      security:
        - BearerAuth: []

  /api/providers/admin/add:
    post:
      tags:
        - Providers
      summary: Add new provider
      description: Add a new vaccine provider to the system (Admin only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - phoneNumber
                - email
                - address
              properties:
                name:
                  type: string
                  description: Provider name (2-100 characters)
                  example: "Cairo Medical Supplies"
                phoneNumber:
                  type: string
                  description: Provider phone number
                  example: "+201012345678"
                email:
                  type: string
                  format: email
                  description: Provider email address
                  example: "info@cairomed.com"
                address:
                  type: string
                  description: Provider address
                  example: "123 Tahrir Square, Cairo, Egypt"
      responses:
        "201":
          description: Provider added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Provider added successfully"
                  data:
                    $ref: "#/components/schemas/Provider"
                  error:
                    type: object
                    nullable: true
        "400":
          description: Invalid input or provider already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Provider with this email already exists"
        "401":
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Unauthorized"
        "403":
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "You are not allowed to access this route"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many provider creation attempts. Please try again after 5 minutes."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error adding provider"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

  /api/nurse:
    get:
      tags:
        - Nurses
      summary: Get all nurses
      description: Retrieve a paginated list of all nurses (Admin only)
      parameters:
        - in: query
          name: cursor
          schema:
            type: string
          description: MongoDB ObjectId of the last nurse from previous page
          example: "60d21b4667d0d8992e610c85"
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Number of nurses per page
          example: 10
      responses:
        "200":
          description: Nurses retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Nurses retrieved successfully"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Nurse"
                  nextCursor:
                    type: string
                    nullable: true
                    description: ObjectId of the last item, use for next page request
                    example: "60d21b4667d0d8992e610c86"
                  error:
                    type: object
                    nullable: true
        "401":
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Unauthorized"
        "403":
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "You are not allowed to access this route"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error retrieving nurses"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

    post:
      tags:
        - Nurses
      summary: Create new nurse
      description: Add a new nurse to the system (Admin only)
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - name
                - phoneNumber
                - hospitalName
              properties:
                name:
                  type: string
                  description: Nurse's full name (2-100 characters)
                  example: "Dr. Sarah Ahmed"
                phoneNumber:
                  type: string
                  description: Nurse's phone number (unique)
                  example: "+201012345678"
                hospitalName:
                  type: string
                  description: Hospital or clinic where nurse works
                  example: "Cairo Medical Center"
                image:
                  type: string
                  format: binary
                  description: Nurse's profile image (optional)
      responses:
        "201":
          description: Nurse created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Nurse created successfully"
                  data:
                    $ref: "#/components/schemas/Nurse"
                  error:
                    type: object
                    nullable: true
        "400":
          description: Invalid input or nurse already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Nurse with this phone number already exists"
        "401":
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Unauthorized"
        "403":
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "You are not allowed to access this route"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error creating nurse"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

  /api/nurse/{nurseId}/slots:
    get:
      tags:
        - Nurses
      summary: Get nurse slots
      description: Retrieve all time slots for a specific nurse (Admin only)
      parameters:
        - in: path
          name: nurseId
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the nurse
          example: "60d21b4667d0d8992e610c85"
      responses:
        "200":
          description: Nurse slots retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Nurse slots retrieved successfully"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/NurseSlot"
                  error:
                    type: object
                    nullable: true
        "404":
          description: Nurse not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Nurse not found"
        "401":
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Unauthorized"
        "403":
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "You are not allowed to access this route"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error retrieving nurse slots"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

  /api/nurse/{nurseId}/assign:
    post:
      tags:
        - Nurses
      summary: Assign nurse to vaccine request
      description: Assign a nurse to a specific vaccine request (Admin only)
      parameters:
        - in: path
          name: nurseId
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the nurse to assign
          example: "60d21b4667d0d8992e610c85"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - vaccineRequestId
                - slotId
              properties:
                vaccineRequestId:
                  type: string
                  format: uuid
                  description: ID of the vaccine request
                  example: "60d21b4667d0d8992e610c87"
                slotId:
                  type: string
                  format: uuid
                  description: ID of the nurse slot
                  example: "60d21b4667d0d8992e610c88"
      responses:
        "200":
          description: Nurse assigned successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Nurse assigned to vaccine request successfully"
                  data:
                    type: object
                    properties:
                      vaccineRequest:
                        $ref: "#/components/schemas/VaccineRequest"
                      nurseSlot:
                        $ref: "#/components/schemas/NurseSlot"
                  error:
                    type: object
                    nullable: true
        "400":
          description: Invalid request or slot already booked
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Nurse slot is already booked"
        "404":
          description: Nurse, vaccine request, or slot not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Nurse or vaccine request not found"
        "401":
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Unauthorized"
        "403":
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "You are not allowed to access this route"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error assigning nurse to vaccine request"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

  /api/nurse/{nurseId}/free-slots:
    get:
      tags:
        - Nurses
      summary: Get free nurse slots
      description: Retrieve available (unbooked) time slots for a specific nurse (Admin only)
      parameters:
        - in: path
          name: nurseId
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the nurse
          example: "60d21b4667d0d8992e610c85"
      responses:
        "200":
          description: Free nurse slots retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Free nurse slots retrieved successfully"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/NurseSlot"
                  error:
                    type: object
                    nullable: true
        "404":
          description: Nurse not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Nurse not found"
        "401":
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Unauthorized"
        "403":
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "You are not allowed to access this route"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error retrieving free nurse slots"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

  /api/nurse/{id}:
    delete:
      tags:
        - Nurses
      summary: Delete nurse
      description: Delete a nurse from the system (Admin only)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the nurse to delete
          example: "60d21b4667d0d8992e610c85"
      responses:
        "200":
          description: Nurse deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Nurse deleted successfully"
                  data:
                    type: object
                    nullable: true
                  error:
                    type: object
                    nullable: true
        "404":
          description: Nurse not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Nurse not found"
        "401":
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Unauthorized"
        "403":
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "You are not allowed to access this route"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error deleting nurse"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

components:
  schemas:
    VaccineRequest:
      type: object
      properties:
        _id:
          type: string
          format: uuid
          example: "60d21b4667d0d8992e610c86"
        status:
          type: string
          enum: ["Pending", "Confirmed", "Rejected"]
          default: "Pending"
          example: "Pending"
        vaccinationDate:
          type: string
          format: date
          example: "2025-05-20"
        phoneNumber:
          type: string
          example: "+201234567891"  
        governorate:
          type: string
          example: "Cairo"
        city:
          type: string
          example: "Nasr City"
        street:
          type: string
          example: "Abbas El-Akkad St"
        buildingNumber:
          type: integer
          example: 42
        apartmentNumber:
          type: integer
          example: 5
        createdAt:
          type: string
          format: date-time
          example: "2025-05-13T10:15:30Z"        
          updatedAt:
          type: string
          format: date-time          
          example: "2025-05-13T10:15:30Z"

    Provider:
      type: object
      description: >
        Represents a vaccine provider/supplier in the system. Providers supply 
        vaccines to the platform and are managed by administrators.
      properties:
        _id:
          type: string
          format: uuid
          example: "60d21b4667d0d8992e610c88"
        name:
          type: string
          description: Provider company or organization name
          example: "Cairo Medical Supplies"
        phoneNumber:
          type: string
          description: Provider's contact phone number (unique)
          example: "+201012345678"
        email:
          type: string
          format: email
          description: Provider's email address (unique)
          example: "info@cairomed.com"
        address:
          type: string
          description: Provider's physical address
          example: "123 Tahrir Square, Cairo, Egypt"
        createdAt:
          type: string
          format: date-time
          description: When the provider was added to the system
          example: "2025-05-28T10:15:30Z"
        updatedAt:
          type: string
          format: date-time
          description: When the provider information was last updated
          example: "2025-05-28T10:15:30Z"
      examples:
        medicalSupplier:
          summary: "Medical supplies provider"
          description: "A pharmaceutical supplier company"
          value:
            _id: "60d21b4667d0d8992e610c88"
            name: "Cairo Medical Supplies"
            phoneNumber: "+201012345678"
            email: "info@cairomed.com"
            address: "123 Tahrir Square, Cairo, Egypt"
            createdAt: "2025-05-28T10:15:30Z"
            updatedAt: "2025-05-28T10:15:30Z"
        hospitalProvider:
          summary: "Hospital provider"
          description: "A hospital that also acts as a vaccine provider"
          value:
            _id: "60d21b4667d0d8992e610c89"
            name: "Alexandria General Hospital"
            phoneNumber: "+203987654321"
            email: "vaccines@alexhospital.com"
            address: "456 Corniche Street, Alexandria, Egypt"
            createdAt: "2025-05-27T14:20:45Z"
            updatedAt: "2025-05-27T14:20:45Z"

    Child:
      type: object
      properties:
        _id:
          type: string
          format: uuid
          example: "60d21b4667d0d8992e610c86"
        userId:
          type: string
          format: uuid
          description: ID of the parent user
          example: "60d21b4667d0d8992e610c84"
        name:
          type: string
          example: "Ahmed Mohamed"
        birthDate:
          type: string
          format: date
          example: "2020-01-15"
        gender:
          type: string
          enum: ["male", "female"]
          example: "male"
        bloodType:
          type: string
          enum: ["A+", "A-", "B+", "B-", "AB+", "AB-", "O+", "O-"]
          example: "O+"
        ssn:
          type: string
          description: Social security number (14 digits)
          example: "30001152345678"
        birthCertificate:
          type: string
          description: URL to birth certificate document stored in Cloudinary
          example: "https://res.cloudinary.com/ddktkfkyy/image/upload/v1624291123/Vaccines-Reminder/Children/certificates/1624291123123-birth-cert.jpg"

    Complaint:
      type: object
      description: >
        Represents a user complaint or suggestion submitted to the system.
        Contains feedback about system functionality, issues, or improvement suggestions.
      properties:
        _id:
          type: string
          format: uuid
          example: "60d21b4667d0d8992e610c91"
        userId:
          type: string
          format: uuid
          description: ID of the user who submitted the complaint
          example: "60d21b4667d0d8992e610c84"
        message:
          type: string
          description: The complaint or suggestion content
          example: "I experienced difficulties accessing the vaccine booking system. The page keeps loading indefinitely and I cannot complete my child's vaccination appointment."
        type:
          type: string
          enum: ["Complaint", "Suggestion"]
          description: Type of feedback submitted
          example: "Complaint"
        createdAt:
          type: string
          format: date-time
          description: When the complaint was submitted
          example: "2025-05-28T14:30:45Z"
        updatedAt:
          type: string
          format: date-time
          description: When the complaint was last updated
          example: "2025-05-28T14:30:45Z"
      examples:
        userComplaint:
          summary: "User complaint about system issues"
          description: "A complaint submitted by a user about technical difficulties"
          value:
            _id: "60d21b4667d0d8992e610c91"
            userId: "60d21b4667d0d8992e610c84"
            message: "I experienced difficulties accessing the vaccine booking system. The page keeps loading indefinitely and I cannot complete my child's vaccination appointment."
            type: "Complaint"
            createdAt: "2025-05-28T14:30:45Z"
            updatedAt: "2025-05-28T14:30:45Z"
        userSuggestion:
          summary: "User suggestion for improvement"
          description: "A suggestion submitted by a user for system enhancement"
          value:
            _id: "60d21b4667d0d8992e610c92"
            userId: "60d21b4667d0d8992e610c85"
            message: "It would be great if you could add a mobile app for easier access to vaccination schedules and reminders."
            type: "Suggestion"           
            createdAt: "2025-05-27T09:15:30Z"
            updatedAt: "2025-05-27T09:15:30Z"

    Product:
      type: object
      description: >
        Represents a product/vaccine in the system. Products can be purchased
        and added to shopping carts by users.
      properties:
        _id:
          type: string
          format: uuid
          example: "6803e59f5cfbd3f8d54aaec9"
        name:
          type: string
          description: Product name (2-100 characters)
          example: "Vitamin D Supplement for Infants"
        price:
          type: number
          format: float
          minimum: 1
          description: Product price in currency units
          example: 29.99
        description:
          type: string
          description: Product description (20-1000 characters)
          example: "High-quality vitamin D supplement specially formulated for infants from 0-12 months. Sugar-free and easy to administer."
        image:
          type: string
          format: uri
          description: URL to product image stored in Cloudinary
          example: "https://res.cloudinary.com/ddktkfkyy/image/upload/v1624291123/Vaccines-Reminder/Products/example-product.jpg"
        quantity:
          type: integer
          minimum: 0
          description: Available product quantity in inventory
          example: 100
        rating:
          type: number
          format: float
          minimum: 0
          maximum: 5
          description: Average product rating based on user reviews
          example: 4.5
        features:
          type: array
          description: List of product features (1-10 features, each 3-500 characters)
          items:
            type: string
            minLength: 3
            maxLength: 500
          example:
            - "Sugar-free formula"
            - "Easy to administer"
            - "Pediatrician recommended"
            - "Safe for newborns"
        requiredAge:
          type: string
          description: Required age information (5-30 characters)
          minLength: 5
          maxLength: 30
          example: "0-12 months"
        createdAt:
          type: string
          format: date-time
          description: When the product was created
          example: "2025-05-20T10:15:30Z"
        updatedAt:
          type: string
          format: date-time
          description: When the product was last updated
          example: "2025-05-20T10:15:30Z"
        reviews:
          type: array
          description: Product reviews (populated from ProductReview collection)
          items:
            $ref: "#/components/schemas/ProductReview"
      examples:
        vitaminSupplement:
          summary: "Vitamin D supplement product"
          description: "A vitamin supplement for infants"
          value:
            _id: "6803e59f5cfbd3f8d54aaec9"
            name: "Vitamin D Supplement for Infants"
            price: 29.99
            description: "High-quality vitamin D supplement specially formulated for infants from 0-12 months. Sugar-free and easy to administer."
            image: "https://res.cloudinary.com/ddktkfkyy/image/upload/v1624291123/Vaccines-Reminder/Products/vitamin-d.jpg"
            quantity: 100
            rating: 4.5
            features:
              - "Sugar-free formula"
              - "Easy to administer"
              - "Pediatrician recommended"
              - "Safe for newborns"
            requiredAge: "0-12 months"
            createdAt: "2025-05-20T10:15:30Z"
            updatedAt: "2025-05-20T10:15:30Z"

    Cart:
      type: object
      description: >
        Represents a shopping cart belonging to a user. Users can have one pending cart at a time,
        and multiple completed carts (online paid, waiting for cash payment, or delivered).
      properties:
        _id:
          type: string
          format: uuid
          example: "680cde050f7a995dadea207a"
        userId:
          type: string
          format: uuid
          description: ID of the cart owner
          example: "68055a4228a57b56dc11b7df"
        productsCount:
          type: integer
          minimum: 0
          description: Total number of individual products in the cart
          example: 3
        totalPrice:
          type: number
          format: float
          minimum: 0
          description: Total price of all products in the cart
          example: 129.97
        status:
          type: string
          enum: ["Pending", "Online paid", "Waiting for cash payment", "Delivered"]
          description: Current status of the cart
          example: "Pending"
        governorate:
          type: string
          description: Delivery governorate (required for cash payment)
          example: "Cairo"
        city:
          type: string
          description: Delivery city (required for cash payment)
          example: "Nasr City"
        street:
          type: string
          description: Delivery street address (required for cash payment)
          example: "Abbas El-Akkad St"
        buildingNumber:
          type: integer
          minimum: 1
          description: Delivery building number (required for cash payment)
          example: 42
        apartmentNumber:
          type: integer
          minimum: 1
          description: Delivery apartment number (required for cash payment)
          example: 5
        paymentType:
          type: string
          enum: ["Cash", "Online"]
          description: Payment method for the cart
          example: "Cash"
        createdAt:
          type: string
          format: date-time
          description: When the cart was created
          example: "2025-05-28T14:30:45Z"
        updatedAt:
          type: string
          format: date-time
          description: When the cart was last updated
          example: "2025-05-28T14:30:45Z"
        products:
          type: array
          description: Products in the cart (populated from CartProduct collection)
          items:
            $ref: "#/components/schemas/CartProduct"
      examples:
        pendingCart:
          summary: "Pending cart for cash payment"
          description: "A cart in pending status waiting to be confirmed"
          value:
            _id: "680cde050f7a995dadea207a"
            userId: "68055a4228a57b56dc11b7df"
            productsCount: 2
            totalPrice: 59.98
            status: "Pending"
            governorate: "Cairo"
            city: "Nasr City"
            street: "Abbas El-Akkad St"
            buildingNumber: 42
            apartmentNumber: 5
            paymentType: "Cash"
            createdAt: "2025-05-28T14:30:45Z"
            updatedAt: "2025-05-28T14:30:45Z"
        deliveredCart:
          summary: "Delivered cart"
          description: "A cart that has been successfully delivered"
          value:
            _id: "680cde050f7a995dadea207b"
            userId: "68055a4228a57b56dc11b7df"
            productsCount: 1
            totalPrice: 29.99
            status: "Delivered"
            governorate: "Alexandria"
            city: "Downtown"
            street: "Corniche St"
            buildingNumber: 15
            apartmentNumber: 3
            paymentType: "Online"
            createdAt: "2025-05-25T10:15:30Z"
            updatedAt: "2025-05-27T16:45:12Z"

    CartProduct:
      type: object
      description: >
        Represents a product within a cart, including quantity and calculated price.
        Each cart can contain multiple products with different quantities.
      properties:
        _id:
          type: string
          format: uuid
          example: "680cde7a0f7a995dadea207c"
        cartId:
          type: string
          format: uuid
          description: ID of the cart containing this product
          example: "680cde050f7a995dadea207a"
        productId:
          type: string
          format: uuid
          description: ID of the product in the cart
          example: "6803e59f5cfbd3f8d54aaec9"
        quantity:
          type: integer
          minimum: 1
          description: Quantity of this product in the cart
          example: 2
        price:
          type: number
          format: float
          minimum: 1
          description: Total price for this quantity of the product
          example: 59.98
        name:
          type: string
          description: Product name (populated from Product collection)
          example: "Vitamin D Supplement for Infants"
        image:
          type: string
          format: uri
          description: Product image URL (populated from Product collection)
          example: "https://res.cloudinary.com/ddktkfkyy/image/upload/v1624291123/Vaccines-Reminder/Products/vitamin-d.jpg"
        requiredAge:
          type: string
          description: Product required age (populated from Product collection)
          example: "0-12 months"
        createdAt:
          type: string
          format: date-time
          description: When the product was added to the cart
          example: "2025-05-28T14:32:15Z"
        updatedAt:
          type: string
          format: date-time
          description: When the cart product was last updated
          example: "2025-05-28T14:32:15Z"
      examples:
        cartProductExample:
          summary: "Cart product with details"
          description: "A product in a cart with populated product information"
          value:
            _id: "680cde7a0f7a995dadea207c"
            cartId: "680cde050f7a995dadea207a"
            productId: "6803e59f5cfbd3f8d54aaec9"
            quantity: 2
            price: 59.98
            name: "Vitamin D Supplement for Infants"
            image: "https://res.cloudinary.com/ddktkfkyy/image/upload/v1624291123/Vaccines-Reminder/Products/vitamin-d.jpg"
            requiredAge: "0-12 months"
            createdAt: "2025-05-28T14:32:15Z"
            updatedAt: "2025-05-28T14:32:15Z"

    User:
      type: object
      description: >
        Represents a user/parent in the system. Users can manage children, 
        create carts, submit reviews, and make vaccine requests.
      properties:
        _id:
          type: string
          format: uuid
          example: "68055a4228a57b56dc11b7df"
        fName:
          type: string
          description: User's first name
          example: "Ahmed"
        lName:
          type: string
          description: User's last name
          example: "Mohamed"
        slug:
          type: string
          description: URL-friendly version of user's name
          example: "ahmed-mohamed"
        email:
          type: string
          format: email
          description: User's email address (unique)
          example: "ahmed.mohamed@example.com"
        phoneNumber:
          type: string
          description: User's phone number (unique)
          example: "+201012345678"
        gender:
          type: string
          enum: ["male", "female"]
          description: User's gender
          example: "male"
        birthDate:
          type: string
          format: date
          description: User's birth date
          example: "1990-01-15"
        governorate:
          type: string
          description: User's governorate for address
          example: "Cairo"
        city:
          type: string
          description: User's city for address
          example: "Nasr City"
        street:
          type: string
          description: User's street address
          example: "Abbas El-Akkad St"
        buildingNumber:
          type: integer
          minimum: 1
          description: User's building number
          example: 42
        apartmentNumber:
          type: integer
          minimum: 1
          description: User's apartment number
          example: 5
        role:
          type: string
          enum: ["user", "admin"]
          description: User role in the system
          example: "user"
        isVerified:
          type: boolean
          description: Whether the user's account is verified
          example: true
        profilePicture:
          type: string
          format: uri
          nullable: true
          description: URL to user's profile picture
          example: "https://res.cloudinary.com/ddktkfkyy/image/upload/v1624291123/Vaccines-Reminder/Users/profile.jpg"
        createdAt:
          type: string
          format: date-time
          description: When the user account was created
          example: "2025-05-20T10:15:30Z"
        updatedAt:
          type: string
          format: date-time
          description: When the user account was last updated
          example: "2025-05-20T10:15:30Z"
      examples:
        regularUser:
          summary: "Regular user account"
          description: "A standard user account with complete profile"
          value:
            _id: "68055a4228a57b56dc11b7df"
            fName: "Ahmed"
            lName: "Mohamed"
            slug: "ahmed-mohamed"
            email: "ahmed.mohamed@example.com"
            phoneNumber: "+201012345678"
            gender: "male"
            birthDate: "1990-01-15"
            governorate: "Cairo"
            city: "Nasr City"
            street: "Abbas El-Akkad St"
            buildingNumber: 42
            apartmentNumber: 5
            role: "user"
            isVerified: true
            createdAt: "2025-05-20T10:15:30Z"
            updatedAt: "2025-05-20T10:15:30Z"

    Vaccine:
      type: object
      description: >
        Represents a vaccine in the system that can be requested by users for their children.
        Vaccines are provided by healthcare providers and have specific age requirements.
      properties:
        _id:
          type: string
          format: uuid
          example: "60d21b4667d0d8992e610c87"
        name:
          type: string
          description: Vaccine name (2-100 characters)
          example: "Hepatitis B Vaccine"
        requiredAge:
          type: string
          enum: 
            - "No specific age required"
            - "3 months"
            - "6 months"
            - "9 months"
            - "1 year"
            - "1 year and 3 months"
            - "1 year and 6 months"
            - "1 year and 9 months"
            - "2 years"
            - "2 years and 3 months"
            - "2 years and 6 months"
            - "2 years and 9 months"
            - "3 years"
            - "3 years and 3 months"
            - "3 years and 6 months"
            - "3 years and 9 months"
            - "4 years"
          description: Age requirement for the vaccine
          example: "3 months"
        description:
          type: string
          description: Vaccine description (20-1000 characters)
          minLength: 20
          maxLength: 1000
          example: "Hepatitis B vaccine protects against hepatitis B virus infection. It is recommended for all newborns and infants as part of routine immunization."
        price:
          type: number
          format: float
          minimum: 0
          description: Cost of the vaccine
          example: 150.00
        provider:
          type: string
          format: uuid
          description: ID of the healthcare provider supplying this vaccine
          example: "60d21b4667d0d8992e610c88"
        createdAt:
          type: string
          format: date-time
          description: When the vaccine was added to the system
          example: "2025-05-28T10:15:30Z"
        updatedAt:
          type: string
          format: date-time
          description: When the vaccine information was last updated
          example: "2025-05-28T10:15:30Z"
      examples:
        hepatitisBVaccine:
          summary: "Hepatitis B vaccine"
          description: "Standard childhood vaccination"
          value:
            _id: "60d21b4667d0d8992e610c87"
            name: "Hepatitis B Vaccine"
            requiredAge: "3 months"
            description: "Hepatitis B vaccine protects against hepatitis B virus infection. It is recommended for all newborns and infants as part of routine immunization."
            price: 150.00
            provider: "60d21b4667d0d8992e610c88"
            createdAt: "2025-05-28T10:15:30Z"
            updatedAt: "2025-05-28T10:15:30Z"

    ProductReview:
      type: object
      description: >
        Represents a product review submitted by a user. Each user can only 
        submit one review per product, and users can only review products they have purchased.
      properties:
        _id:
          type: string
          format: uuid
          example: "6839a9f7c7522462a378f7db"
        productId:
          type: string
          format: uuid
          description: ID of the product being reviewed
          example: "60d21b4667d0d8992e610c85"
        userId:
          type: string
          format: uuid
          description: ID of the user who submitted the review
          example: "68055a4228a57b56dc11b7df"
        message:
          type: string
          description: Review message content (10-5000 characters)
          minLength: 10
          maxLength: 5000
          example: "Great product! My child loves it and it's very effective."
        rating:
          type: integer
          minimum: 0
          maximum: 5
          description: Product rating from 0 to 5 stars
          example: 5
        createdAt:
          type: string
          format: date-time
          description: When the review was created
          example: "2025-05-30T12:52:07.842Z"
        updatedAt:
          type: string
          format: date-time
          description: When the review was last updated
          example: "2025-05-30T12:52:07.842Z"
      examples:
        positiveReview:
          summary: "Positive product review"
          description: "A 5-star review with positive feedback"
          value:
            _id: "6839a9f7c7522462a378f7db"
            productId: "60d21b4667d0d8992e610c85"
            userId: "68055a4228a57b56dc11b7df"
            message: "Excellent product quality! My baby responded very well to this vaccine. Highly recommended."
            rating: 5
            createdAt: "2025-05-30T12:52:07.842Z"
            updatedAt: "2025-05-30T12:52:07.842Z"

    Nurse:
      type: object
      description: >
        Represents a nurse in the system who can be assigned to vaccine requests.
        Each nurse has automatically generated time slots for availability.
      properties:
        _id:
          type: string
          format: uuid
          example: "60d21b4667d0d8992e610c85"
        fName:
          type: string
          description: Nurse's first name
          example: "Ahmed"
        lName:
          type: string
          description: Nurse's last name
          example: "Mohamed"
        email:
          type: string
          format: email
          description: Nurse's email address (unique)
          example: "nurse.ahmed@hospital.com"
        phone:
          type: string
          description: Nurse's phone number (unique)
          example: "01012345678"
        hospitalName:
          type: string
          description: Hospital or clinic where nurse works
          example: "Cairo Medical Center"
        profileImage:
          type: string
          nullable: true
          description: URL to nurse's profile image
          example: "https://res.cloudinary.com/example/nurse-profile.jpg"
        createdAt:
          type: string
          format: date-time
          description: When the nurse was added to the system
          example: "2025-05-28T10:15:30Z"
        updatedAt:
          type: string
          format: date-time
          description: When the nurse information was last updated
          example: "2025-05-28T10:15:30Z"

    NurseSlot:
      type: object
      description: >
        Represents a time slot for a nurse's availability. Slots are automatically 
        generated for each nurse and can be booked for vaccine appointments.
      properties:
        _id:
          type: string
          format: uuid
          example: "6839c1a2c7522462a378f7dd"
        nurseId:
          type: string
          format: uuid
          description: ID of the nurse this slot belongs to
          example: "60d21b4667d0d8992e610c85"
        date:
          type: string
          format: date
          description: Date of the appointment slot
          example: "2025-05-30"
        startTime:
          type: string
          description: Start time of the slot (24-hour format)
          example: "09:00"
        endTime:
          type: string
          description: End time of the slot (24-hour format)
          example: "10:00"
        isBooked:
          type: boolean
          description: Whether this slot is already booked
          example: false
        createdAt:
          type: string
          format: date-time
          description: When the slot was created
          example: "2025-05-28T10:15:30Z"
        updatedAt:
          type: string
          format: date-time
          description: When the slot was last updated
          example: "2025-05-28T10:15:30Z"
      examples:
        availableSlot:
          summary: "Available nurse slot"
          description: "A slot that can be booked for appointments"
          value:
            _id: "6839c1a2c7522462a378f7dd"
            nurseId: "60d21b4667d0d8992e610c85"
            date: "2025-05-30"
            startTime: "09:00"
            endTime: "10:00"
            isBooked: false
            createdAt: "2025-05-28T10:15:30Z"
            updatedAt: "2025-05-28T10:15:30Z"
        bookedSlot:
          summary: "Booked nurse slot"
          description: "A slot that has been assigned to a vaccine request"
          value:
            _id: "6839c1a2c7522462a378f7de"
            nurseId: "60d21b4667d0d8992e610c85"           
            date: "2025-05-30"
            startTime: "10:00"
            endTime: "11:00"
            isBooked: true
            createdAt: "2025-05-28T10:15:30Z"
            updatedAt: "2025-05-30T08:45:22Z"

  securitySchemes:
    BearerAuth:
      type: http
      scheme: Bearer
      bearerFormat: JWT
      description: JWT token obtained after authentication