openapi: 3.0.0
info:
  title: Vaccines Reminder APIs
  description: APIs for managing products in the Vaccines Reminder application
  version: 1.0.0
servers:
  - url: http://localhost:8000
    description: Development server

paths:
  /api/products/admin/add:
    post:
      tags:
        - Products
      summary: Create new product
      description: Add a new product to the system (Admin only)
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - name
                - price
                - description
                - quantity
                - image
                - features
                - requiredAge
              properties:
                name:
                  type: string
                  description: Product name (2-100 characters)
                  example: "Vitamin D Supplement"
                price:
                  type: number
                  format: float
                  description: Product price (positive number)
                  example: 29.99
                description:
                  type: string
                  description: Product description (20-1000 characters)
                  example: "High-quality vitamin D supplement for infants"
                quantity:
                  type: integer
                  description: Product quantity (positive integer)
                  example: 100
                image:
                  type: string
                  format: binary
                  description: Product image (JPG, PNG, GIF)
                features:
                  type: array
                  description: List of product features (1-10 features, each 3-250 characters)
                  items:
                    type: string
                  example:
                    [
                      "Sugar-free formula",
                      "Easy to administer",
                      "Pediatrician recommended",
                    ]
                requiredAge:
                  type: string
                  description: Required age information (5-30 characters)
                  example: "0-12 months"
      responses:
        "201":
          description: Product created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product is successfully created"
                  data:
                    $ref: "#/components/schemas/Product"
                  error:
                    type: object
                    nullable: true
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product name is not a valid string"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 429
                  message:
                    type: string
                    example: "Too many product creation attempts. Please try again in 1 minute."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error inserting product"
                  error:
                    type: object

  /api/products:
    get:
      tags:
        - Products
      summary: Get all products
      description: Retrieve a paginated list of available products using cursor-based pagination
      parameters:
        - in: query
          name: cursor
          schema:
            type: string
          description: MongoDB ObjectId of the last product from previous page
          example: "60d21b4667d0d8992e610c85"
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Number of products per page
          example: 10
      responses:
        "200":
          description: Products retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Products are successfully retrieved"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Product"
                  nextCursor:
                    type: string
                    nullable: true
                    description: ObjectId of the last item, use for next page request
                    example: "60d21b4667d0d8992e610c86"
                  error:
                    type: object
                    nullable: true
        "400":
          description: Invalid query parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation failed. Please check your input."
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        msg:
                          type: string
                          example: "Cursor must be a valid MongoDB ObjectId"
                        param:
                          type: string
                          example: "cursor"
                        location:
                          type: string
                          example: "query"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 429
                  message:
                    type: string
                    example: "Too many products fetch attempts. Please try again in 1 minute."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error getting all products"
                  error:
                    type: string
                    example: "Database connection error"

  /api/products/admin/update-quantity/{id}:
    patch:
      tags:
        - Products
      summary: Update product quantity
      description: Update the quantity of a product (Admin only)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the product to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - quantity
              properties:
                quantity:
                  type: integer
                  description: The new quantity (non-negative integer)
                  example: 50
      responses:
        "200":
          description: Product quantity updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product with ID X updated successfully"
                  data:
                    $ref: "#/components/schemas/Product"
                  error:
                    type: object
                    nullable: true
        "400":
          description: Invalid input or product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Could not find the product of ID: X"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 429
                  message:
                    type: string
                    example: "Too many product quantity update attempts. Please try again in 1 minute."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error updating product quantity of ID X"
                  error:
                    type: string
                    example: "Database connection error"

  /api/products/admin/delete/{id}:
    delete:
      tags:
        - Products
      summary: Delete a product
      description: Delete a product by ID (Admin only)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the product to delete
      responses:
        "200":
          description: Product deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product with ID X is deleted successfully"
                  data:
                    $ref: "#/components/schemas/Product"
                  error:
                    type: object
                    nullable: true
        "400":
          description: Product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Could not find the product of ID: X"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 429
                  message:
                    type: string
                    example: "Too many product deletion attempts. Please try again in 1 minute."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error deleting product of ID X"
                  error:
                    type: string
                    example: "Database connection error"

  /api/carts:
    post:
      tags:
        - Carts
      summary: Create new cart
      description: >
        Create a new cart with products. Address fields (governorate, city, street, buildingNumber, apartmentNumber) 
        are required only for Cash payments. For Online payments, the user's registered address is automatically used.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - cart
                - products
              properties:
                cart:
                  type: object
                  required:
                    - productsCount
                    - totalPrice
                    - paymentType
                  properties:
                    productsCount:
                      type: integer
                      description: Total count of products in the cart
                      example: 5
                    totalPrice:
                      type: number
                      format: float
                      description: Total price of the cart
                      example: 341.5
                    governorate:
                      type: string
                      description: "Delivery address governorate (4-30 characters, required only for Cash payments)"
                      example: "Cairo"
                    city:
                      type: string
                      description: "Delivery address city (4-50 characters, required only for Cash payments)"
                      example: "1st Settlement"
                    street:
                      type: string
                      description: "Delivery address street (4-100 characters, required only for Cash payments)"
                      example: "Main Street"
                    buildingNumber:
                      type: integer
                      description: "Building number (positive integer, required only for Cash payments)"
                      example: 123
                    apartmentNumber:
                      type: integer
                      description: "Apartment number (positive integer, required only for Cash payments)"
                      example: 45
                    paymentType:
                      type: string
                      enum: ["Cash", "Online"]
                      default: "Online"
                      description: "Payment method (Online payments use user's registered address automatically)"
                      example: "Cash"
                products:
                  type: array
                  description: Array of products to add to the cart
                  items:
                    type: object
                    required:
                      - productId
                      - quantity
                      - price
                    properties:
                      productId:
                        type: string
                        format: uuid
                        description: MongoDB ObjectId of the product
                        example: "6802bcef489dbe50c70aad5b"
                      quantity:
                        type: integer
                        minimum: 1
                        description: Quantity of this product
                        example: 3
                      price:
                        type: number
                        format: float
                        description: Total price for this product (quantity * unit price)
                        example: 181.5
                  example:
                    - productId: "6802bcef489dbe50c70aad5b"
                      quantity: 3
                      price: 181.5
                    - productId: "6803e59f5cfbd3f8d54aaec9"
                      quantity: 2
                      price: 160
      responses:
        "201":
          description: Cart created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cart is successfully created"
                  data:
                    type: object
                    properties:
                      cart:
                        $ref: "#/components/schemas/Cart"
                    error:
                      type: object
                      nullable: true
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation failed"
                  errors:
                    type: object
                    additionalProperties:
                      type: object
                      properties:
                        msg:
                          type: string
                          example: "Cart must contain at least one product"
                        path:
                          type: string
                          example: "products"
                        location:
                          type: string
                          example: "body"
        "404":
          description: Product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product of id: 60d21b4667d0d8992e610c85 is not found in database"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many cart creation attempts. Please try again after 15 minutes."
                  retryAfter:
                    type: integer
                    description: "Number of seconds to wait before retrying"
                    example: 900
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error inserting cart"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

  /api/carts/user-cart/{cartId}:
    get:
      tags:
        - Carts
      summary: Get specific cart with products
      description: Get details of a specific cart and its products
      parameters:
        - in: path
          name: cartId
          required: true
          schema:
            type: string
            format: uuid
          description: MongoDB ObjectId of the cart
          example: "60d21b4667d0d8992e610c87"
      responses:
        "200":
          description: Cart retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User cart of user id: 123, retrieved successfully"
                  data:
                    type: object
                    properties:
                      cart:
                        $ref: "#/components/schemas/Cart"
                      products:
                        type: array
                        items:
                          type: object
                          properties:
                            productId:
                              type: string
                              format: uuid
                              example: "60d21b4667d0d8992e610c85"
                            name:
                              type: string
                              example: "Vitamin D Supplement"
                            image:
                              type: string
                              example: "https://res.cloudinary.com/example/image/upload/vitamin-d.jpg"
                            requiredAge:
                              type: string
                              example: "6 months"
                            quantity:
                              type: integer
                              example: 2
                            price:
                              type: number
                              format: float
                              example: 59.98
                  error:
                    type: object
                    nullable: true
        "400":
          description: Invalid cart ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation failed"
                  errors:
                    type: object
                    properties:
                      cartId:
                        type: object
                        properties:
                          msg:
                            type: string
                            example: "Invalid cart ID format. Must be a valid MongoDB ObjectId"
                          param:
                            type: string
                            example: "cartId"
                          location:
                            type: string
                            example: "params"
        "404":
          description: Cart not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Could not find user cart of user id: 123"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many cart creation attempts. Please try again later."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error finding user cart"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

components:
  schemas:
    Product:
      type: object
      properties:
        _id:
          type: string
          format: uuid
          example: "60d21b4667d0d8992e610c85"
        name:
          type: string
          example: "Vitamin D Supplement"
        price:
          type: number
          format: float
          example: 29.99
        description:
          type: string
          example: "High-quality vitamin D supplement for infants"
        image:
          type: string
          example: "https://res.cloudinary.com/ddktkfkyy/image/upload/v1624291123/Vaccines-Reminder/Products/1624291123123-vitamind.jpg"
        quantity:
          type: integer
          example: 100
        rating:
          type: number
          example: 0
        features:
          type: array
          items:
            type: string
          example:
            [
              "Sugar-free formula",
              "Easy to administer",
              "Pediatrician recommended",
            ]
        requiredAge:
          type: string
          example: "6 months"
    Cart:
      type: object
      description: >
        Represents a user's shopping cart. Address fields are required for Cash payments.
        For Online payments, these fields are automatically populated from the user's registered address.
      properties:
        _id:
          type: string
          format: uuid
          example: "60d21b4667d0d8992e610c87"
        userId:
          type: string
          format: uuid
          example: "60d21b4667d0d8992e610c85"
        productsCount:
          type: integer
          example: 3
        totalPrice:
          type: number
          format: float
          example: 149.97
        status:
          type: string
          enum: ["Pending", "Confirmed", "Waiting for cash payment"]
          example: "Pending"
        governorate:
          type: string
          example: "Cairo"
        city:
          type: string
          example: "1st Settlement"
        street:
          type: string
          example: "Main Street"
        buildingNumber:
          type: integer
          example: 123
        appartmentNumber:
          type: integer
          example: 45
        apartmentNumber:
          type: integer
          example: 45
        paymentType:
          type: string
          enum: ["Cash", "Online"]
          example: "Cash"
    CartProduct:
      type: object
      properties:
        _id:
          type: string
          format: uuid
          example: "60d21b4667d0d8992e610c88"
        cartId:
          type: string
          format: uuid
          example: "60d21b4667d0d8992e610c87"
        productId:
          type: string
          format: uuid
          example: "60d21b4667d0d8992e610c85"
        quantity:
          type: integer
          example: 2
        price:
          type: number
          format: float
          example: 59.98
  securitySchemes:
    BearerAuth:
      type: http
      scheme: Bearer
      bearerFormat: JWT
      description: JWT token obtained after authentication
