openapi: 3.0.0
info:
  title: Vaccines Reminder APIs
  description: APIs for managing products in the Vaccines Reminder application
  version: 1.0.0
servers:
  - url: http://localhost:8000
    description: Development server

paths:
  /api/products/admin/add:
    post:
      tags:
        - Products
      summary: Create new product
      description: Add a new product to the system (Admin only)
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - name
                - price
                - description
                - quantity
                - image
                - features
                - requiredAge
              properties:
                name:
                  type: string
                  description: Product name (2-100 characters)
                  example: "Vitamin D Supplement"
                price:
                  type: number
                  format: float
                  description: Product price (positive number)
                  example: 29.99
                description:
                  type: string
                  description: Product description (20-1000 characters)
                  example: "High-quality vitamin D supplement for infants"
                quantity:
                  type: integer
                  description: Product quantity (positive integer)
                  example: 100
                image:
                  type: string
                  format: binary
                  description: Product image (JPG, PNG, GIF)
                features:
                  type: array
                  description: List of product features (1-10 features, each 3-250 characters)
                  items:
                    type: string
                  example:
                    [
                      "Sugar-free formula",
                      "Easy to administer",
                      "Pediatrician recommended",
                    ]
                requiredAge:
                  type: string
                  description: Required age information (5-30 characters)
                  example: "0-12 months"
      responses:
        "201":
          description: Product created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product is successfully created"
                  data:
                    $ref: "#/components/schemas/Product"
                  error:
                    type: object
                    nullable: true
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product name is not a valid string"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 429
                  message:
                    type: string
                    example: "Too many product creation attempts. Please try again in 1 minute."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error inserting product"
                  error:
                    type: object

  /api/products:
    get:
      tags:
        - Products
      summary: Get all products
      description: Retrieve a paginated list of available products using cursor-based pagination
      parameters:
        - in: query
          name: cursor
          schema:
            type: string
          description: MongoDB ObjectId of the last product from previous page
          example: "60d21b4667d0d8992e610c85"
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Number of products per page
          example: 10
      responses:
        "200":
          description: Products retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Products are successfully retrieved"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Product"
                  nextCursor:
                    type: string
                    nullable: true
                    description: ObjectId of the last item, use for next page request
                    example: "60d21b4667d0d8992e610c86"
                  error:
                    type: object
                    nullable: true
        "400":
          description: Invalid query parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation failed. Please check your input."
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        msg:
                          type: string
                          example: "Cursor must be a valid MongoDB ObjectId"
                        param:
                          type: string
                          example: "cursor"
                        location:
                          type: string
                          example: "query"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 429
                  message:
                    type: string
                    example: "Too many products fetch attempts. Please try again in 1 minute."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error getting all products"
                  error:
                    type: string
                    example: "Database connection error"

  /api/products/admin/update-quantity/{id}:
    patch:
      tags:
        - Products
      summary: Update product quantity
      description: Update the quantity of a product (Admin only)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the product to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - quantity
              properties:
                quantity:
                  type: integer
                  description: The new quantity (non-negative integer)
                  example: 50
      responses:
        "200":
          description: Product quantity updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product with ID X updated successfully"
                  data:
                    $ref: "#/components/schemas/Product"
                  error:
                    type: object
                    nullable: true
        "400":
          description: Invalid input or product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Could not find the product of ID: X"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 429
                  message:
                    type: string
                    example: "Too many product quantity update attempts. Please try again in 1 minute."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error updating product quantity of ID X"
                  error:
                    type: string
                    example: "Database connection error"

  /api/products/admin/delete/{id}:
    delete:
      tags:
        - Products
      summary: Delete a product
      description: Delete a product by ID (Admin only)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the product to delete
      responses:
        "200":
          description: Product deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product with ID X is deleted successfully"
                  data:
                    $ref: "#/components/schemas/Product"
                  error:
                    type: object
                    nullable: true
        "400":
          description: Product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Could not find the product of ID: X"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 429
                  message:
                    type: string
                    example: "Too many product deletion attempts. Please try again in 1 minute."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error deleting product of ID X"
                  error:
                    type: string
                    example: "Database connection error"

  /api/carts:
    post:
      tags:
        - Carts
      summary: Create new cart
      description: >
        Create a new cart with products. Address fields (governorate, city, street, buildingNumber, apartmentNumber) 
        are required only for Cash payments. For Online payments, the user's registered address is automatically used.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - cart
              properties:
                cart:
                  type: object
                  properties:
                    governorate:
                      type: string
                      description: "Delivery address governorate (4-30 characters, required only for Cash payments)"
                      example: "Cairo"
                    city:
                      type: string
                      description: "Delivery address city (4-50 characters, required only for Cash payments)"
                      example: "1st Settlement"
                    street:
                      type: string
                      description: "Delivery address street (4-100 characters, required only for Cash payments)"
                      example: "Main Street"
                    buildingNumber:
                      type: integer
                      description: "Building number (positive integer, required only for Cash payments)"
                      example: 123
                    apartmentNumber:
                      type: integer
                      description: "Apartment number (positive integer, required only for Cash payments)"
                      example: 45
                    paymentType:
                      type: string
                      enum: ["Cash", "Online"]
                      default: "Online"
                      description: "Payment method (Online payments use user's registered address automatically)"
                      example: "Cash"
      responses:
        "201":
          description: Cart created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cart is successfully created"
                  data:
                    type: object
                    properties:
                      cart:
                        $ref: "#/components/schemas/Cart"
                    error:
                      type: object
                      nullable: true
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation failed"
                  errors:
                    type: object
                    additionalProperties:
                      type: object
                      properties:
                        msg:
                          type: string
                          example: "Cart must contain at least one product"
                        path:
                          type: string
                          example: "products"
                        location:
                          type: string
                          example: "body"
        "404":
          description: Product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product of id: 60d21b4667d0d8992e610c85 is not found in database"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many cart creation attempts. Please try again after 15 minutes."
                  retryAfter:
                    type: integer
                    description: "Number of seconds to wait before retrying"
                    example: 900
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error inserting cart"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

  /api/carts/{cartId}:
    get:
      tags:
        - Carts
      summary: Get specific cart with products
      description: Get details of a specific cart and its products
      parameters:
        - in: path
          name: cartId
          required: true
          schema:
            type: string
            format: uuid
          description: MongoDB ObjectId of the cart
          example: "60d21b4667d0d8992e610c87"
      responses:
        "200":
          description: Cart retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cart retrieved successfully"
                  data:
                    type: object
                    properties:
                      cart:
                        $ref: "#/components/schemas/Cart"
                      products:
                        type: array
                        items:
                          type: object
                          properties:
                            productId:
                              type: string
                              format: uuid
                              example: "60d21b4667d0d8992e610c85"
                            name:
                              type: string
                              example: "Vitamin D Supplement"
                            image:
                              type: string
                              example: "https://res.cloudinary.com/example/image/upload/vitamin-d.jpg"
                            requiredAge:
                              type: string
                              example: "6 months"
                            quantity:
                              type: integer
                              example: 2
                            price:
                              type: number
                              format: float
                              example: 59.98
                  error:
                    type: object
                    nullable: true
        "400":
          description: Invalid cart ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation failed"
                  errors:
                    type: object
                    properties:
                      cartId:
                        type: object
                        properties:
                          msg:
                            type: string
                            example: "Invalid cart ID format. Must be a valid MongoDB ObjectId"
                          param:
                            type: string
                            example: "cartId"
                          location:
                            type: string
                            example: "params"
        "404":
          description: Cart not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cart not found or does not belong to you"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many cart retrieval attempts. Please try again after a minute."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error finding cart"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

  /api/carts/{cartId}/products:
    post:
      tags:
        - Carts
      summary: Add product to cart
      description: Add a product to an existing cart
      parameters:
        - in: path
          name: cartId
          required: true
          schema:
            type: string
            format: uuid
          description: MongoDB ObjectId of the cart
          example: "680cde050f7a995dadea207a"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - productId
                - quantity
              properties:
                productId:
                  type: string
                  format: uuid
                  description: MongoDB ObjectId of the product to add
                  example: "6803e59f5cfbd3f8d54aaec9"
                quantity:
                  type: integer
                  minimum: 1
                  description: Quantity of the product
                  example: 2
      responses:
        "201":
          description: Product successfully added to cart
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product is successfully added to cart"
                  data:
                    $ref: "#/components/schemas/CartProduct"
                  error:
                    type: object
                    nullable: true
        "400":
          description: Invalid input or validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation failed. Please check your input."
        "404":
          description: Cart or product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product with ID 6803e59f5cfbd3f8d54aaec9 not found"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many product addition attempts. Please try again after a minute."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error adding product to cart"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

  /api/carts/{cartId}/products/{productId}:
    delete:
      tags:
        - Carts
      summary: Remove product from cart
      description: Remove a specific product from a cart
      parameters:
        - in: path
          name: cartId
          required: true
          schema:
            type: string
            format: uuid
          description: MongoDB ObjectId of the cart
          example: "680cde050f7a995dadea207a"
        - in: path
          name: productId
          required: true
          schema:
            type: string
            format: uuid
          description: MongoDB ObjectId of the product to remove
          example: "6803e59f5cfbd3f8d54aaec9"
      responses:
        "200":
          description: Product successfully removed from cart
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product removed from cart successfully"
                  data:
                    $ref: "#/components/schemas/CartProduct"
                  error:
                    type: object
                    nullable: true
        "404":
          description: Cart, product, or cart product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product not found in this cart"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many product removal attempts. Please try again after a minute."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error removing product from cart"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

    patch:
      tags:
        - Carts
      summary: Update product quantity in cart
      description: Update the quantity of a product in a cart
      parameters:
        - in: path
          name: cartId
          required: true
          schema:
            type: string
            format: uuid
          description: MongoDB ObjectId of the cart
          example: "680cde050f7a995dadea207a"
        - in: path
          name: productId
          required: true
          schema:
            type: string
            format: uuid
          description: MongoDB ObjectId of the product
          example: "6803e59f5cfbd3f8d54aaec9"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - quantity
              properties:
                quantity:
                  type: integer
                  minimum: 1
                  description: New quantity for the product
                  example: 3
      responses:
        "200":
          description: Product quantity updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cart product quantity updated successfully"
                  data:
                    $ref: "#/components/schemas/CartProduct"
                  error:
                    type: object
                    nullable: true
        "400":
          description: Invalid quantity or insufficient inventory
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Insufficient inventory. Only 5 additional units available."
        "404":
          description: Cart, product, or cart product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product not found in this cart"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many quantity update attempts. Please try again after a minute."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error updating product quantity"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

  /api/carts/{cartId}:
    delete:
      tags:
        - Carts
      summary: Delete cart
      description: Delete an entire cart and return its products to inventory
      parameters:
        - in: path
          name: cartId
          required: true
          schema:
            type: string
            format: uuid
          description: MongoDB ObjectId of the cart
          example: "680cde050f7a995dadea207a"
      responses:
        "200":
          description: Cart deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cart deleted successfully"
                  data:
                    type: object
                    properties:
                      deletedCart:
                        $ref: "#/components/schemas/Cart"
                  error:
                    type: object
                    nullable: true
        "400":
          description: Cart not found or invalid status
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cannot delete cart with status: Confirmed"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many cart deletion attempts. Please try again after an hour."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error deleting cart"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

  /api/carts/status/{cartId}:
    patch:
      tags:
        - Carts
      summary: Update cart status
      description: >
        Update the status of a cash payment cart from "Pending" to "Waiting for cash payment".
        This endpoint is used when a user confirms their cash payment cart.
      parameters:
        - in: path
          name: cartId
          required: true
          schema:
            type: string
            format: uuid
          description: MongoDB ObjectId of the cart to update
          example: "680cde050f7a995dadea207a"
      responses:
        "200":
          description: Cart status updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cart status is updated successfully"
                  data:
                    type: object
                    properties:
                      confirmedCart:
                        allOf:
                          - $ref: "#/components/schemas/Cart"
                        examples:
                          waitingForPaymentCart:
                            $ref: "#/components/schemas/Cart/examples/waitingForPaymentCart"
                  error:
                    type: object
                    nullable: true
              examples:
                successfulUpdate:
                  summary: "Successful status update"
                  value:
                    message: "Cart status is updated successfully"
                    data:
                      confirmedCart:
                        _id: "60d21b4667d0d8992e610c88"
                        userId: "60d21b4667d0d8992e610c85"
                        productsCount: 2
                        totalPrice: 89.98
                        status: "Waiting for cash payment"
                        governorate: "Alexandria"
                        city: "Sidi Gaber"
                        street: "Corniche Street"
                        buildingNumber: 456
                        apartmentNumber: 12
                        paymentType: "Cash"
                    error: null
        "400":
          description: Invalid input or cart validation failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation Failed!"
                  errors:
                    type: object
                    properties:
                      cartId:
                        type: object
                        properties:
                          msg:
                            type: string
                            example: "Cart not found, does not belong to you, is not in 'Pending' status, or is not a cash payment cart"
        "401":
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Unauthorized"
        "404":
          description: Cart not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cart with id: 680cde050f7a995dadea207a not found for user with id: 60d21b4667d0d8992e610c84"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many cart status update attempts. Please try again after an hour."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error updating cart status"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

  /api/carts/pending:
    get:
      tags:
        - Carts
      summary: Get user's pending cart
      description: Retrieve the current user's pending cart if one exists
      responses:
        "200":
          description: Pending cart retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Pending cart retrieved successfully"
                  data:
                    $ref: "#/components/schemas/Cart"
                  error:
                    type: object
                    nullable: true
              examples:
                pendingCart:
                  summary: "User's pending cart"
                  value:
                    message: "Pending cart retrieved successfully"
                    data:
                      _id: "60d21b4667d0d8992e610c87"
                      userId: "60d21b4667d0d8992e610c85"
                      productsCount: 2
                      totalPrice: 79.98
                      status: "Pending"
                      governorate: "Cairo"
                      city: "Nasr City"
                      street: "Abbas El-Akkad Street"
                      buildingNumber: 123
                      apartmentNumber: 45
                      paymentType: "Cash"
                    error: null
        "401":
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Unauthorized"
        "404":
          description: No pending cart found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No pending cart found for this user"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many pending cart retrieval attempts. Please try again after a minute."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error retrieving pending cart"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

components:
  schemas:
    Product:
      type: object
      properties:
        _id:
          type: string
          format: uuid
          example: "60d21b4667d0d8992e610c85"
        name:
          type: string
          example: "Vitamin D Supplement"
        price:
          type: number
          format: float
          example: 29.99
        description:
          type: string
          example: "High-quality vitamin D supplement for infants"
        image:
          type: string
          example: "https://res.cloudinary.com/ddktkfkyy/image/upload/v1624291123/Vaccines-Reminder/Products/1624291123123-vitamind.jpg"
        quantity:
          type: integer
          example: 100
        rating:
          type: number
          example: 0
        features:
          type: array
          items:
            type: string
          example:
            [
              "Sugar-free formula",
              "Easy to administer",
              "Pediatrician recommended",
            ]
        requiredAge:
          type: string
          example: "6 months"
    Cart:
      type: object
      description: >
        Represents a user's shopping cart. Address fields are required for Cash payments.
        For Online payments, these fields are automatically populated from the user's registered address.
      properties:
        _id:
          type: string
          format: uuid
          example: "60d21b4667d0d8992e610c87"
        userId:
          type: string
          format: uuid
          example: "60d21b4667d0d8992e610c85"
        productsCount:
          type: integer
          example: 3
        totalPrice:
          type: number
          format: float
          example: 149.97
        status:
          type: string
          enum: ["Pending", "Confirmed", "Waiting for cash payment"]
          example: "Pending"
        governorate:
          type: string
          example: "Cairo"
        city:
          type: string
          example: "1st Settlement"
        street:
          type: string
          example: "Main Street"
        buildingNumber:
          type: integer
          example: 123
        apartmentNumber:
          type: integer
          example: 45
        paymentType:
          type: string
          enum: ["Cash", "Online"]
          example: "Cash"
      examples:
        pendingCart:
          summary: "Pending Cart"
          description: "A cart with pending status (newly created)"
          value:
            _id: "60d21b4667d0d8992e610c87"
            userId: "60d21b4667d0d8992e610c85"
            productsCount: 3
            totalPrice: 149.97
            status: "Pending"
            governorate: "Cairo"
            city: "1st Settlement"
            street: "Main Street"
            buildingNumber: 123
            apartmentNumber: 45
            paymentType: "Cash"
        waitingForPaymentCart:
          summary: "Waiting for Cash Payment Cart"
          description: "A cart waiting for cash payment (status updated)"
          value:
            _id: "60d21b4667d0d8992e610c88"
            userId: "60d21b4667d0d8992e610c85"
            productsCount: 2
            totalPrice: 89.98
            status: "Waiting for cash payment"
            governorate: "Alexandria"
            city: "Sidi Gaber"
            street: "Corniche Street"
            buildingNumber: 456
            apartmentNumber: 12
            paymentType: "Cash"
        confirmedCart:
          summary: "Confirmed Cart"
          description: "A cart that has been confirmed and processed"
          value:
            _id: "60d21b4667d0d8992e610c89"
            userId: "60d21b4667d0d8992e610c85"
            productsCount: 1
            totalPrice: 29.99
            status: "Confirmed"
            governorate: "Giza"
            city: "6th of October"
            street: "Mall of Arabia Street"
            buildingNumber: 789
            apartmentNumber: 3
    CartProduct:
      type: object
      properties:
        _id:
          type: string
          format: uuid
          example: "60d21b4667d0d8992e610c88"
        cartId:
          type: string
          format: uuid
          example: "60d21b4667d0d8992e610c87"
        productId:
          type: string
          format: uuid
          example: "60d21b4667d0d8992e610c85"
        quantity:
          type: integer
          example: 2
        price:
          type: number
          format: float
          example: 59.98
  securitySchemes:
    BearerAuth:
      type: http
      scheme: Bearer
      bearerFormat: JWT
      description: JWT token obtained after authentication
