openapi: 3.0.0
info:
  title: Vaccines Reminder APIs
  description: APIs for managing products in the Vaccines Reminder application
  version: 1.0.0
servers:
  - url: http://localhost:8000
    description: Development server

paths:
  /api/products/admin/add:
    post:
      tags:
        - Products
      summary: Create new product
      description: Add a new product to the system (Admin only)
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - name
                - price
                - description
                - quantity
                - image
                - features
                - requiredAge
              properties:
                name:
                  type: string
                  description: Product name (2-100 characters)
                  example: "Vitamin D Supplement"
                price:
                  type: number
                  format: float
                  description: Product price (positive number)
                  example: 29.99
                description:
                  type: string
                  description: Product description (20-1000 characters)
                  example: "High-quality vitamin D supplement for infants"
                quantity:
                  type: integer
                  description: Product quantity (positive integer)
                  example: 100
                image:
                  type: string
                  format: binary
                  description: Product image (JPG, PNG, GIF)
                features:
                  type: array
                  description: List of product features (1-10 features, each 3-250 characters)
                  items:
                    type: string
                  example:
                    [
                      "Sugar-free formula",
                      "Easy to administer",
                      "Pediatrician recommended",
                    ]
                requiredAge:
                  type: string
                  description: Required age information (5-30 characters)
                  example: "0-12 months"
      responses:
        "201":
          description: Product created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product is successfully created"
                  data:
                    $ref: "#/components/schemas/Product"
                  error:
                    type: object
                    nullable: true
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product name is not a valid string"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 429
                  message:
                    type: string
                    example: "Too many product creation attempts. Please try again in 1 minute."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error inserting product"
                  error:
                    type: object

  /api/products:
    get:
      tags:
        - Products
      summary: Get all products
      description: Retrieve a paginated list of available products using cursor-based pagination
      parameters:
        - in: query
          name: cursor
          schema:
            type: string
          description: MongoDB ObjectId of the last product from previous page
          example: "60d21b4667d0d8992e610c85"
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Number of products per page
          example: 10
      responses:
        "200":
          description: Products retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Products are successfully retrieved"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Product"
                  nextCursor:
                    type: string
                    nullable: true
                    description: ObjectId of the last item, use for next page request
                    example: "60d21b4667d0d8992e610c86"
                  error:
                    type: object
                    nullable: true
        "400":
          description: Invalid query parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation failed. Please check your input."
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        msg:
                          type: string
                          example: "Cursor must be a valid MongoDB ObjectId"
                        param:
                          type: string
                          example: "cursor"
                        location:
                          type: string
                          example: "query"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 429
                  message:
                    type: string
                    example: "Too many products fetch attempts. Please try again in 1 minute."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error getting all products"
                  error:
                    type: string
                    example: "Database connection error"

  /api/products/admin/update-quantity/{id}:
    patch:
      tags:
        - Products
      summary: Update product quantity
      description: Update the quantity of a product (Admin only)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the product to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - quantity
              properties:
                quantity:
                  type: integer
                  description: The new quantity (non-negative integer)
                  example: 50
      responses:
        "200":
          description: Product quantity updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product with ID X updated successfully"
                  data:
                    $ref: "#/components/schemas/Product"
                  error:
                    type: object
                    nullable: true
        "400":
          description: Invalid input or product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Could not find the product of ID: X"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 429
                  message:
                    type: string
                    example: "Too many product quantity update attempts. Please try again in 1 minute."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error updating product quantity of ID X"
                  error:
                    type: string
                    example: "Database connection error"

  /api/products/admin/delete/{id}:
    delete:
      tags:
        - Products
      summary: Delete a product
      description: Delete a product by ID (Admin only)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the product to delete
      responses:
        "200":
          description: Product deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product with ID X is deleted successfully"
                  data:
                    $ref: "#/components/schemas/Product"
                  error:
                    type: object
                    nullable: true
        "400":
          description: Product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Could not find the product of ID: X"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 429
                  message:
                    type: string
                    example: "Too many product deletion attempts. Please try again in 1 minute."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error deleting product of ID X"
                  error:
                    type: string
                    example: "Database connection error"

  /api/carts:
    post:
      tags:
        - Carts
      summary: Create new cart
      description: >
        Create a new cart with products. Address fields (governorate, city, street, buildingNumber, apartmentNumber) 
        are required only for Cash payments. For Online payments, the user's registered address is automatically used.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - cart
              properties:
                cart:
                  type: object
                  properties:
                    governorate:
                      type: string
                      description: "Delivery address governorate (4-30 characters, required only for Cash payments)"
                      example: "Cairo"
                    city:
                      type: string
                      description: "Delivery address city (4-50 characters, required only for Cash payments)"
                      example: "1st Settlement"
                    street:
                      type: string
                      description: "Delivery address street (4-100 characters, required only for Cash payments)"
                      example: "Main Street"
                    buildingNumber:
                      type: integer
                      description: "Building number (positive integer, required only for Cash payments)"
                      example: 123
                    apartmentNumber:
                      type: integer
                      description: "Apartment number (positive integer, required only for Cash payments)"
                      example: 45
                    paymentType:
                      type: string
                      enum: ["Cash", "Online"]
                      default: "Online"
                      description: "Payment method (Online payments use user's registered address automatically)"
                      example: "Cash"
      responses:
        "201":
          description: Cart created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cart is successfully created"
                  data:
                    type: object
                    properties:
                      cart:
                        $ref: "#/components/schemas/Cart"
                    error:
                      type: object
                      nullable: true
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation failed"
                  errors:
                    type: object
                    additionalProperties:
                      type: object
                      properties:
                        msg:
                          type: string
                          example: "Cart must contain at least one product"
                        path:
                          type: string
                          example: "products"
                        location:
                          type: string
                          example: "body"
        "404":
          description: Product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product of id: 60d21b4667d0d8992e610c85 is not found in database"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many cart creation attempts. Please try again after 15 minutes."
                  retryAfter:
                    type: integer
                    description: "Number of seconds to wait before retrying"
                    example: 900
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error inserting cart"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

  /api/carts/{cartId}:
    get:
      tags:
        - Carts
      summary: Get specific cart with products
      description: Get details of a specific cart and its products
      parameters:
        - in: path
          name: cartId
          required: true
          schema:
            type: string
            format: uuid
          description: MongoDB ObjectId of the cart
          example: "60d21b4667d0d8992e610c87"
      responses:
        "200":
          description: Cart retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cart retrieved successfully"
                  data:
                    type: object
                    properties:
                      cart:
                        $ref: "#/components/schemas/Cart"
                      products:
                        type: array
                        items:
                          type: object
                          properties:
                            productId:
                              type: string
                              format: uuid
                              example: "60d21b4667d0d8992e610c85"
                            name:
                              type: string
                              example: "Vitamin D Supplement"
                            image:
                              type: string
                              example: "https://res.cloudinary.com/example/image/upload/vitamin-d.jpg"
                            requiredAge:
                              type: string
                              example: "6 months"
                            quantity:
                              type: integer
                              example: 2
                            price:
                              type: number
                              format: float
                              example: 59.98
                  error:
                    type: object
                    nullable: true
        "400":
          description: Invalid cart ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation failed"
                  errors:
                    type: object
                    properties:
                      cartId:
                        type: object
                        properties:
                          msg:
                            type: string
                            example: "Invalid cart ID format. Must be a valid MongoDB ObjectId"
                          param:
                            type: string
                            example: "cartId"
                          location:
                            type: string
                            example: "params"
        "404":
          description: Cart not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cart not found or does not belong to you"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many cart retrieval attempts. Please try again after a minute."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error finding cart"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

  /api/carts/{cartId}/products:
    post:
      tags:
        - Carts
      summary: Add product to cart
      description: Add a product to an existing cart
      parameters:
        - in: path
          name: cartId
          required: true
          schema:
            type: string
            format: uuid
          description: MongoDB ObjectId of the cart
          example: "680cde050f7a995dadea207a"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - productId
                - quantity
              properties:
                productId:
                  type: string
                  format: uuid
                  description: MongoDB ObjectId of the product to add
                  example: "6803e59f5cfbd3f8d54aaec9"
                quantity:
                  type: integer
                  minimum: 1
                  description: Quantity of the product
                  example: 2
      responses:
        "201":
          description: Product successfully added to cart
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product is successfully added to cart"
                  data:
                    $ref: "#/components/schemas/CartProduct"
                  error:
                    type: object
                    nullable: true
        "400":
          description: Invalid input or validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation failed. Please check your input."
        "404":
          description: Cart or product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product with ID 6803e59f5cfbd3f8d54aaec9 not found"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many product addition attempts. Please try again after a minute."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error adding product to cart"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

  /api/carts/{cartId}/products/{productId}:
    delete:
      tags:
        - Carts
      summary: Remove product from cart
      description: Remove a specific product from a cart
      parameters:
        - in: path
          name: cartId
          required: true
          schema:
            type: string
            format: uuid
          description: MongoDB ObjectId of the cart
          example: "680cde050f7a995dadea207a"
        - in: path
          name: productId
          required: true
          schema:
            type: string
            format: uuid
          description: MongoDB ObjectId of the product to remove
          example: "6803e59f5cfbd3f8d54aaec9"
      responses:
        "200":
          description: Product successfully removed from cart
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product removed from cart successfully"
                  data:
                    $ref: "#/components/schemas/CartProduct"
                  error:
                    type: object
                    nullable: true
        "404":
          description: Cart, product, or cart product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product not found in this cart"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many product removal attempts. Please try again after a minute."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error removing product from cart"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

    patch:
      tags:
        - Carts
      summary: Update product quantity in cart
      description: Update the quantity of a product in a cart
      parameters:
        - in: path
          name: cartId
          required: true
          schema:
            type: string
            format: uuid
          description: MongoDB ObjectId of the cart
          example: "680cde050f7a995dadea207a"
        - in: path
          name: productId
          required: true
          schema:
            type: string
            format: uuid
          description: MongoDB ObjectId of the product
          example: "6803e59f5cfbd3f8d54aaec9"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - quantity
              properties:
                quantity:
                  type: integer
                  minimum: 1
                  description: New quantity for the product
                  example: 3
      responses:
        "200":
          description: Product quantity updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cart product quantity updated successfully"
                  data:
                    $ref: "#/components/schemas/CartProduct"
                  error:
                    type: object
                    nullable: true
        "400":
          description: Invalid quantity or insufficient inventory
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Insufficient inventory. Only 5 additional units available."
        "404":
          description: Cart, product, or cart product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product not found in this cart"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many quantity update attempts. Please try again after a minute."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error updating product quantity"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

  /api/carts/{cartId}:
    delete:
      tags:
        - Carts
      summary: Delete cart
      description: Delete an entire cart and return its products to inventory
      parameters:
        - in: path
          name: cartId
          required: true
          schema:
            type: string
            format: uuid
          description: MongoDB ObjectId of the cart
          example: "680cde050f7a995dadea207a"
      responses:
        "200":
          description: Cart deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cart deleted successfully"
                  data:
                    type: object
                    properties:
                      deletedCart:
                        $ref: "#/components/schemas/Cart"
                  error:
                    type: object
                    nullable: true
        "400":
          description: Cart not found or invalid status
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cannot delete cart with status: Confirmed"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many cart deletion attempts. Please try again after an hour."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error deleting cart"
                  error:
                    type: string
                    example: "Server error"
      security:
        - BearerAuth: []

  /api/payment/send-otp/{cartid}:
    get:
      tags:
        - Payment
      summary: Send payment verification OTP
      description: >
        Sends a one-time password to the user's registered phone number for payment verification.
        OTPs are valid for 2 minutes and rate-limited to 3 requests every 5 minutes.
      parameters:
        - in: path
          name: cartId
          required: true
          schema:
            type: string
            format: uuid
          description: MongoDB ObjectId of the cart
          example: "60d21b4667d0d8992e610c87"
      responses:
        "201":
          description: OTP sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Otp is successfully sent to phone number: +201012345678"
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Baby-Guard payment verification code is: 105582. For your security, do not share this code. This OTP will expire in 2 minutes!"
                  error:
                    type: object
                    nullable: true
        "400":
          description: Invalid input or validation failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation failed"
                  errors:
                    type: object
                    properties:
                      cartId:
                        type: object
                        properties:
                          msg:
                            type: string
                            example: "Cart not found or does not belong to you"
                          param:
                            type: string
                            example: "cartId"
                          location:
                            type: string
                            example: "body"
        "403":
          description: Cart not eligible for OTP
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cannot send OTP for cart with status: Confirmed"
                  errors:
                    type: object
        "429":
          description: Too many OTP requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many OTP requests. Please try again after 5 minutes."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error sending otp"
                  error:
                    type: string
                    example: "Failed to send SMS: Invalid phone number format"
      security:
        - BearerAuth: []

  /api/payment/verify-otp:
    post:
      tags:
        - Payment
      summary: Verify payment OTP
      description: >
        Verifies the OTP provided by the user against the stored OTP for payment confirmation.
        Rate-limited to 5 attempts every 15 minutes to prevent brute force attacks.
        Upon successful verification, the cart status is updated based on payment type.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - cartId
                - code
              properties:
                cartId:
                  type: string
                  format: uuid
                  description: MongoDB ObjectId of the cart
                  example: "60d21b4667d0d8992e610c87"
                code:
                  type: string
                  description: 6-digit OTP code received via WhatsApp
                  example: "123456"
      responses:
        "200":
          description: OTP verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "OTP verified successfully"
                  data:
                    type: object
                    properties:
                      cart:
                        $ref: "#/components/schemas/Cart"
                  error:
                    type: object
                    nullable: true
        "400":
          description: Invalid input or expired OTP
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "OTP has expired"
        "403":
          description: Invalid OTP code
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid OTP code"
        "429":
          description: Too many verification attempts
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many verification attempts. Please try again after 15 minutes."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Payment verification failed"
                  error:
                    type: string
                    example: "Database error"
      security:
        - BearerAuth: []

  /api/payment/resend-otp/{cartId}:
    patch:
      tags:
        - Payment
      summary: Resend payment verification OTP
      description: >
        Regenerates and resends a payment verification OTP to the user's registered phone number.
        Rate-limited to 2 requests every 10 minutes. Requires an existing OTP to have been sent.
        There must be at least 30 seconds between the original OTP and resend request.
      parameters:
        - in: path
          name: cartId
          required: true
          schema:
            type: string
            format: uuid
          description: MongoDB ObjectId of the cart
          example: "60d21b4667d0d8992e610c87"
      responses:
        "201":
          description: OTP resent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Otp is successfully sent to phone number: +201012345678"
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Baby-Guard payment verification code is: 105582. For your security, do not share this code. This OTP will expire in 2 minutes!"
                  error:
                    type: object
                    nullable: true
        "400":
          description: Invalid input or validation failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation failed"
                  errors:
                    type: object
                    properties:
                      cartId:
                        type: object
                        properties:
                          msg:
                            type: string
                            example: "No OTP exists for this cart. Use send-otp instead."
                          param:
                            type: string
                            example: "cartId"
                          location:
                            type: string
                            example: "params"
        "403":
          description: Cart not eligible for OTP resend
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "An OTP was just sent. Please wait at least 30 seconds before requesting a resend."
        "429":
          description: Too many OTP resend requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many resend attempts. Please try again after 10 minutes."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error updating payment otp"
                  error:
                    type: string
                    example: "Database connection error"
      security:
        - BearerAuth: []

  /api/payment/cancel/{cartId}:
    delete:
      tags:
        - Payment
      summary: Cancel payment and delete cart
      description: >
        Cancels a pending payment by deleting the cart and all associated products.
        This can only be done for carts with "Pending" status.
        Rate-limited to 5 requests every 15 minutes.
      parameters:
        - in: path
          name: cartId
          required: true
          schema:
            type: string
            format: uuid
          description: MongoDB ObjectId of the cart to cancel
          example: "60d21b4667d0d8992e610c87"
      responses:
        "200":
          description: Payment cancelled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Payment cancelled successfully"
                  data:
                    type: object
                    properties:
                      deletedCart:
                        $ref: "#/components/schemas/Cart"
        "400":
          description: Invalid input or cart cannot be cancelled
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cannot cancel a cart with status: Confirmed"
        "429":
          description: Too many cancellation attempts
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many cancellation attempts. Please try again after 15 minutes."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Failed to cancel payment"
                  error:
                    type: string
                    example: "Database connection error"
      security:
        - BearerAuth: []

  /api/auth/signup:
    post:
      tags:
        - Authentication
      summary: Register new user
      description: >
        Creates a new user account with the provided information.
        Rate-limited to 5 requests per 10 minutes per IP address.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - fName
                - lName
                - email
                - nationalIdNumer
                - birthDate
                - password
                - passwordConfirm
                - phoneNumber
                - governorate
                - street
                - city
                - buildingNumber
                - apartmentNumber
                - gender
              properties:
                fName:
                  type: string
                  description: First name (3-15 characters)
                  example: "Ahmed"
                lName:
                  type: string
                  description: Last name (3-15 characters)
                  example: "Mohamed"
                email:
                  type: string
                  format: email
                  description: Email address (must be unique)
                  example: "ahmed@example.com"
                nationalIdNumer:
                  type: string
                  description: National ID number (exactly 14 digits, must be unique)
                  example: "29912151234567"
                birthDate:
                  type: string
                  format: date
                  description: Date of birth
                  example: "1999-12-15"
                password:
                  type: string
                  format: password
                  description: Password (minimum 6 characters)
                  example: "securePassword123"
                passwordConfirm:
                  type: string
                  format: password
                  description: Confirm password (must match password)
                  example: "securePassword123"
                phoneNumber:
                  type: string
                  description: Phone number (Egyptian or Saudi Arabian format)
                  example: "+201012345678"
                governorate:
                  type: string
                  description: Governorate/province
                  example: "Cairo"
                city:
                  type: string
                  description: City
                  example: "Heliopolis"
                street:
                  type: string
                  description: Street address
                  example: "123 Main Street"
                buildingNumber:
                  type: integer
                  description: Building number
                  example: 42
                apartmentNumber:
                  type: integer
                  description: Apartment number
                  example: 5
                gender:
                  type: string
                  enum: ["male", "female"]
                  description: Gender
                  example: "male"
                profileImg:
                  type: string
                  format: binary
                  description: Profile image (optional)
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  token:
                    type: string
                    description: JWT authentication token
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  role:
                    type: string
                    example: "parent"
        "400":
          description: Invalid input or validation failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation failed"
                  errors:
                    type: object
                    properties:
                      email:
                        type: object
                        properties:
                          msg:
                            type: string
                            example: "Email already in use"
                          param:
                            type: string
                            example: "email"
                          location:
                            type: string
                            example: "body"
        "429":
          description: Too many registration attempts
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many signup attempts. Please try again in 10 minutes."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error creating user"
                  error:
                    type: string
                    example: "Internal server error"

  /api/auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: >
        Authenticates a user and returns a JWT token.
        Rate-limited to 10 requests per 5 minutes per IP address.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  description: Email address
                  example: "ahmed@example.com"
                password:
                  type: string
                  format: password
                  description: Password
                  example: "securePassword123"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  token:
                    type: string
                    description: JWT authentication token
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  role:
                    type: string
                    example: "parent"
        "400":
          description: Invalid input or validation failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation failed"
                  errors:
                    type: object
                    properties:
                      email:
                        type: object
                        properties:
                          msg:
                            type: string
                            example: "Email not found"
                          param:
                            type: string
                            example: "email"
                          location:
                            type: string
                            example: "body"
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Invalid email or password"
        "429":
          description: Too many login attempts
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Too many login attempts. Please try again in 5 minutes."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error during authentication"
                  error:
                    type: string
                    example: "Internal server error"

components:
  schemas:
    Product:
      type: object
      properties:
        _id:
          type: string
          format: uuid
          example: "60d21b4667d0d8992e610c85"
        name:
          type: string
          example: "Vitamin D Supplement"
        price:
          type: number
          format: float
          example: 29.99
        description:
          type: string
          example: "High-quality vitamin D supplement for infants"
        image:
          type: string
          example: "https://res.cloudinary.com/ddktkfkyy/image/upload/v1624291123/Vaccines-Reminder/Products/1624291123123-vitamind.jpg"
        quantity:
          type: integer
          example: 100
        rating:
          type: number
          example: 0
        features:
          type: array
          items:
            type: string
          example:
            [
              "Sugar-free formula",
              "Easy to administer",
              "Pediatrician recommended",
            ]
        requiredAge:
          type: string
          example: "6 months"
    Cart:
      type: object
      description: >
        Represents a user's shopping cart. Address fields are required for Cash payments.
        For Online payments, these fields are automatically populated from the user's registered address.
      properties:
        _id:
          type: string
          format: uuid
          example: "60d21b4667d0d8992e610c87"
        userId:
          type: string
          format: uuid
          example: "60d21b4667d0d8992e610c85"
        productsCount:
          type: integer
          example: 3
        totalPrice:
          type: number
          format: float
          example: 149.97
        status:
          type: string
          enum: ["Pending", "Confirmed", "Waiting for cash payment"]
          example: "Pending"
        governorate:
          type: string
          example: "Cairo"
        city:
          type: string
          example: "1st Settlement"
        street:
          type: string
          example: "Main Street"
        buildingNumber:
          type: integer
          example: 123
        appartmentNumber:
          type: integer
          example: 45
        apartmentNumber:
          type: integer
          example: 45
        paymentType:
          type: string
          enum: ["Cash", "Online"]
          example: "Cash"
    CartProduct:
      type: object
      properties:
        _id:
          type: string
          format: uuid
          example: "60d21b4667d0d8992e610c88"
        cartId:
          type: string
          format: uuid
          example: "60d21b4667d0d8992e610c87"
        productId:
          type: string
          format: uuid
          example: "60d21b4667d0d8992e610c85"
        quantity:
          type: integer
          example: 2
        price:
          type: number
          format: float
          example: 59.98
    PaymentOtp:
      type: object
      description: >
        Represents a one-time password for payment verification.
        OTPs are valid for 2 minutes and are tied to a specific cart.
      properties:
        _id:
          type: string
          format: uuid
          example: "60d21b4667d0d8992e610c89"
        cartId:
          type: string
          format: uuid
          description: Reference to the cart this OTP is for
          example: "60d21b4667d0d8992e610c87"
        code:
          type: string
          description: Hashed 6-digit OTP code
          example: "$2b$10$X9mT4vUeC0ZVK5hHGUvCIeQGiUpkXZRqBAY7y7Ly42X9XCYV9DJ2K"
        createdAt:
          type: string
          format: date-time
          description: When the OTP was created
          example: "2023-04-21T12:34:56.789Z"
        updatedAt:
          type: string
          format: date-time
          description: When the OTP was last updated
          example: "2023-04-21T12:34:56.789Z"
    User:
      type: object
      properties:
        _id:
          type: string
          format: uuid
          example: "60d21b4667d0d8992e610c84"
        fName:
          type: string
          example: "Ahmed"
        lName:
          type: string
          example: "Mohamed"
        email:
          type: string
          format: email
          example: "ahmed@example.com"
        nationalIdNumer:
          type: string
          example: "29912151234567"
        phoneNumber:
          type: string
          example: "+201012345678"
        governorate:
          type: string
          example: "Cairo"
        city:
          type: string
          example: "Heliopolis"
        street:
          type: string
          example: "123 Main Street"
        buildingNumber:
          type: integer
          example: 42
        apartmentNumber:
          type: integer
          example: 5
        gender:
          type: string
          enum: ["male", "female"]
          example: "male"
        role:
          type: string
          enum: ["parent", "admin"]
          example: "parent"
        profileImg:
          type: string
          example: "https://res.cloudinary.com/your-cloud/image/upload/profile.jpg"
  securitySchemes:
    BearerAuth:
      type: http
      scheme: Bearer
      bearerFormat: JWT
      description: JWT token obtained after authentication
